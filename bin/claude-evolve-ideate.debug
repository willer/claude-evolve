#!/bin/bash

set -e

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/config.sh
source "$SCRIPT_DIR/../lib/config.sh"

# Use CLAUDE_EVOLVE_CONFIG if set, otherwise default
if [[ -n ${CLAUDE_EVOLVE_CONFIG:-} ]]; then
  load_config "$CLAUDE_EVOLVE_CONFIG"
else
  load_config
fi

# Function to determine which model to use based on generation
get_model_for_generation() {
  local generation="$1"
  local gen_num
  
  # Extract numeric part of generation (e.g., "05" from gen05)
  if [[ $generation =~ ^0*([0-9]+)$ ]]; then
    gen_num=$((10#${BASH_REMATCH[1]}))
  else
    gen_num=1  # Default for malformed input
  fi
  
  # Check which AI tools are available
  local has_o3=false
  local has_gemini=false
  
  if command -v codex >/dev/null 2>&1; then
    has_o3=true
  fi
  
  if command -v gemini >/dev/null 2>&1; then
    has_gemini=true
  fi
  
  # Determine rotation based on what's available
  if [[ "$has_o3" == "true" && "$has_gemini" == "true" ]]; then
    # All three available: opus -> o3 -> gemini rotation
    case $((gen_num % 3)) in
      1) echo "opus" ;;     # 1, 4, 7, 10...
      2) echo "o3" ;;       # 2, 5, 8, 11...
      0) echo "gemini" ;;   # 3, 6, 9, 12...
    esac
  elif [[ "$has_o3" == "true" ]]; then
    # Only opus and o3: alternate between them
    if (( gen_num % 2 == 1 )); then
      echo "opus"    # Odd generations
    else
      echo "o3"      # Even generations
    fi
  elif [[ "$has_gemini" == "true" ]]; then
    # Only opus and gemini: alternate between them
    if (( gen_num % 2 == 1 )); then
      echo "opus"    # Odd generations
    else
      echo "gemini" # Even generations
    fi
  else
    # Only opus available
    echo "opus"
  fi
}

# Helper function to call AI model (alternating based on generation)
call_ai_with_limit_check() {
  local prompt="$1"
  local generation="${2:-01}"  # Default to generation 01 if not provided
  
  # Determine which model to use for this generation
  local preferred_model
  preferred_model=$(get_model_for_generation "$generation")
  
  echo "[INFO] Generation $generation: Using $preferred_model" >&2
  
  # Try preferred model first
  if [[ "$preferred_model" == "o3" ]] && command -v codex >/dev/null 2>&1; then
    echo "[INFO] Using codex o3 for ideation" >&2
    
    # Call codex with o3 model using -q flag and --full-auto
    local ai_output
    ai_output=$(codex -m o3 --full-auto -q "$prompt" 2>&1)
    local ai_exit_code=$?
    
    if [[ $ai_exit_code -eq 0 ]]; then
      # Clean o3 output - it may be JSON with the response in a field
      local cleaned_output
      # Try to extract content from JSON response if present
      if echo "$ai_output" | grep -q '"content"'; then
        # Attempt to extract content field from JSON
        cleaned_output=$(echo "$ai_output" | python3 -c "
import sys
import json
try:
    data = json.load(sys.stdin)
    if 'content' in data:
        print(data['content'])
    elif 'response' in data:
        print(data['response'])
    elif 'text' in data:
        print(data['text'])
    else:
        # If no known field, print the whole thing
        print(json.dumps(data))
except:
    # If not valid JSON, print as-is
    print(sys.stdin.read())
" 2>/dev/null || echo "$ai_output")
      else
        cleaned_output="$ai_output"
      fi
      
      # Validate the output is not empty and doesn't contain error messages
      if [[ -n "$cleaned_output" ]] && ! echo "$cleaned_output" | grep -q "error\|failed\|exception"; then
        echo "$cleaned_output"
        return 0
      else
        echo "[WARN] Codex o3 returned invalid output, falling back to Claude Opus" >&2
        preferred_model="opus"
      fi
    else
      echo "[WARN] Codex o3 failed with exit code $ai_exit_code, falling back to Claude Opus" >&2
      preferred_model="opus"
    fi
  elif [[ "$preferred_model" == "gemini" ]] && command -v gemini >/dev/null 2>&1; then
    echo "[INFO] Using gemini 2.5 pro for ideation" >&2
    
    # Call gemini with -y and -p flags
    local ai_output
    ai_output=$(gemini -y -p "$prompt" 2>&1)
    local ai_exit_code=$?
    
    if [[ $ai_exit_code -eq 0 ]]; then
      # Check for authentication messages or other non-response content
      if echo "$ai_output" | grep -q "Attempting to authenticate\|Authenticating\|Loading\|Initializing"; then
        echo "[WARN] Gemini is still authenticating, falling back to Claude Opus" >&2
        preferred_model="opus"
      elif [[ -z "$ai_output" ]] || [[ $(echo "$ai_output" | wc -l) -lt 2 ]]; then
        echo "[WARN] Gemini returned insufficient output, falling back to Claude Opus" >&2
        preferred_model="opus"
      else
        echo "$ai_output"
        return 0
      fi
    else
      echo "[WARN] Gemini failed with exit code $ai_exit_code, falling back to Claude Opus" >&2
      preferred_model="opus"
    fi
  fi
  
  # Use Claude with preferred model (or fallback)
  echo "[INFO] Using Claude $preferred_model for ideation" >&2
  
  # Call Claude and capture output
  local claude_output
  claude_output=$(echo "$prompt" | claude --dangerously-skip-permissions --model "$preferred_model" -p 2>&1)
  local claude_exit_code=$?
  
  # Check for usage limit
  if echo "$claude_output" | grep -q "Claude AI usage limit reached"; then
    # Extract timestamp if available
    local limit_timestamp=$(echo "$claude_output" | grep -o "Claude AI usage limit reached|[0-9]*" | cut -d'|' -f2)
    
    # Print red error message
    echo -e "\033[31m[ERROR] CLAUDE AI USAGE LIMIT REACHED!\033[0m" >&2
    echo -e "\033[31m[ERROR] Ideation halted due to API rate limits.\033[0m" >&2
    
    if [[ -n $limit_timestamp ]]; then
      # Convert timestamp to human-readable format
      local limit_date=$(date -r "$limit_timestamp" "+%Y-%m-%d %H:%M:%S" 2>/dev/null || echo "Unknown time")
      echo -e "\033[31m[ERROR] Limit will be released at: $limit_date\033[0m" >&2
    fi
    
    echo -e "\033[33m[INFO] Please wait for the rate limit to reset before continuing.\033[0m" >&2
    echo -e "\033[33m[INFO] No ideas were generated. Run ideate again when the limit resets.\033[0m" >&2
    
    exit 1
  fi
  
  # Validate output doesn't contain shell constructs that could corrupt CSV
  if echo "$claude_output" | grep -E "EOF.*<.*null|<<.*EOF|<.*dev.*null" >/dev/null 2>&1; then
    echo "[ERROR] AI output contains invalid shell constructs" >&2
    echo "[DEBUG] Problematic output: $claude_output" | head -5 >&2
    return 1
  fi
  
  # Output Claude's response
  echo "$claude_output"
  
  return $claude_exit_code
}

# Backward compatibility alias
call_claude_with_limit_check() {
  call_ai_with_limit_check "$@"
}

# Parse arguments
use_strategies=true

while [[ $# -gt 0 ]]; do
  case $1 in
  --help)
    cat <<EOF
claude-evolve ideate - Generate new algorithm ideas using evolutionary strategies

USAGE:
  claude-evolve ideate [--legacy N]

OPTIONS:
  --legacy N  Use legacy mode with N ideas (ignores strategy config)
  --help      Show this help message

DESCRIPTION:
  Generates algorithm ideas using multi-strategy evolutionary approach:
  - Novel exploration: Pure creativity, global search
  - Hill climbing: Parameter tuning of top performers  
  - Structural mutation: Algorithmic changes to top performers
  - Crossover hybrid: Combine successful approaches
  
  Strategy distribution is configured in evolution/config.yaml
EOF
    exit 0
    ;;
  --legacy)
    use_strategies=false
    shift
    if [[ $1 =~ ^[0-9]+$ ]]; then
      TOTAL_IDEAS=$1
      shift
    else
      echo "[ERROR] --legacy requires a number" >&2
      exit 1
    fi
    ;;
  *)
    echo "[ERROR] Unknown option: $1" >&2
    exit 1
    ;;
  esac
done

# Check workspace using config
if [[ ! -d "$FULL_EVOLUTION_DIR" ]]; then
  echo "[ERROR] Evolution workspace not found: $FULL_EVOLUTION_DIR. Run 'claude-evolve setup' first." >&2
  exit 1
fi

# Ensure CSV exists
if [[ ! -f "$FULL_CSV_PATH" ]]; then
  echo "id,basedOnId,description,performance,status" >"$FULL_CSV_PATH"
fi

# Validate strategy configuration
if [[ $use_strategies == true ]]; then
  total_check=$((NOVEL_EXPLORATION + HILL_CLIMBING + STRUCTURAL_MUTATION + CROSSOVER_HYBRID))
  if [[ $total_check -ne $TOTAL_IDEAS ]]; then
    echo "[ERROR] Strategy counts don't sum to total_ideas ($total_check != $TOTAL_IDEAS)" >&2
    echo "Check your evolution/config.yaml configuration" >&2
    exit 1
  fi
fi

# Get next generation number
get_next_generation() {
  if [[ ! -f "$FULL_CSV_PATH" ]]; then
    echo "01"
    return
  fi
  
  # Use Python for proper CSV parsing
  local max_gen
  max_gen=$("$PYTHON_CMD" -c "
import csv
max_gen = 0
with open('$FULL_CSV_PATH', 'r') as f:
    reader = csv.reader(f)
    next(reader, None)  # Skip header
    for row in reader:
        if row and len(row) > 0:
            id_field = row[0].strip()
            if id_field.startswith('gen') and '-' in id_field:
                try:
                    gen_part = id_field.split('-')[0]  # e.g., 'gen01'
                    gen_num = int(gen_part[3:])  # Extract number after 'gen'
                    max_gen = max(max_gen, gen_num)
                except (ValueError, IndexError):
                    pass
print(max_gen)
")
  
  # Increment and format with leading zero
  printf "%02d" $((max_gen + 1))
}

# Get next available ID number for current generation
get_next_id_number() {
  "$PYTHON_CMD" -c "
import csv
import re
max_id = 0
pattern = re.compile(r'^gen$CURRENT_GENERATION-(\d+)$')
with open('$FULL_CSV_PATH', 'r') as f:
    reader = csv.reader(f)
    next(reader, None)  # Skip header
    for row in reader:
        if row and len(row) > 0:
            match = pattern.match(row[0].strip())
            if match:
                max_id = max(max_id, int(match.group(1)))
print(max_id + 1)
"
}

# Process AI output and add ideas to CSV
process_ai_ideas() {
  local ai_output="$1"
  local count="$2"
  local idea_type="$3"  # novel, hill-climbing, structural, crossover
  local top_performers="${4:-}"  # Optional, for non-novel ideas
  
  local next_id_num=$(get_next_id_number)
  local ideas_added=0
  
  while IFS= read -r line && [[ $ideas_added -lt $count ]]; do
    # Skip empty lines
    [[ -z "$line" || "$line" =~ ^[[:space:]]*$ ]] && continue
    
    # Skip lines that look like headers or metadata
    [[ "$line" =~ ^#|^\[|^==|^-- ]] && continue
    
    # Clean the line
    line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    line=$(echo "$line" | sed 's/^[0-9]\+\.\?[[:space:]]*//')  # Remove numbering
    line=$(echo "$line" | sed 's/^-[[:space:]]*//')  # Remove bullet points
    
    # Extract parent ID and description based on type
    local parent_id=""
    local description="$line"
    
    if [[ "$idea_type" != "novel" ]]; then
      # For non-novel ideas, extract parent ID from "From X:" format
      if [[ "$line" =~ ^From[[:space:]]+([^:]+):[[:space:]]*(.+)$ ]]; then
        parent_id="${BASH_REMATCH[1]}"
        description="${BASH_REMATCH[2]}"
      else
        # If no parent specified, use the first from top_performers
        parent_id=$(echo "$top_performers" | head -1 | cut -d',' -f1)
      fi
    fi
    
    # Skip if description is too short or contains problematic content
    [[ ${#description} -lt 20 ]] && continue
    if echo "$description" | grep -qE 'EOF|/dev/null|<<<|>>>'; then
      continue
    fi
    
    # Skip AI system messages and errors
    if echo "$description" | grep -qiE 'loaded.*cached.*credentials|authenticating|loading.*model|initializing|error.*occurred|failed.*to.*load|api.*key|rate.*limit|connection.*error|timeout|please.*try.*again|authentication.*failed|invalid.*request|model.*not.*available'; then
      echo "[WARN] Skipping AI system message: $description" >&2
      continue
    fi
    
    # Skip responses that don't look like algorithm descriptions
    if ! echo "$description" | grep -qiE 'algorithm|strategy|trading|position|signal|indicator|portfolio|risk|stop.?loss|profit|market|price|volatility|momentum|trend|regime|filter|threshold|window|period|weight|allocation|component'; then
      echo "[WARN] Skipping non-algorithm description: $description" >&2
      continue
    fi
    
    # Generate ID for this idea
    local idea_id=$(printf "gen%s-%03d" "$CURRENT_GENERATION" $((next_id_num + ideas_added)))
    
    # Escape quotes in description for CSV
    description="${description//\"/\"\"}"
    
    # Append to CSV
    echo "$idea_id,$parent_id,\"$description\",,pending" >> "$FULL_CSV_PATH"
    
    ((ideas_added++))
    if [[ -n "$parent_id" ]]; then
      echo "[INFO] Added $idea_type idea $idea_id (parent: $parent_id): ${description:0:50}..."
    else
      echo "[INFO] Added $idea_type idea $idea_id: ${description:0:70}..."
    fi
  done <<< "$ai_output"
  
  if [[ $ideas_added -lt $count ]]; then
    echo "[WARN] Only generated $ideas_added out of $count requested $idea_type ideas" >&2
  fi
  
  # Return error if no valid ideas were generated
  if [[ $ideas_added -eq 0 ]]; then
    echo "[ERROR] Failed to generate any valid $idea_type ideas - AI may be returning system messages" >&2
    return 1
  fi
  
  return 0
}

# Get next available ID for current generation
get_next_id() {
  local generation="$1"
  if [[ ! -f "$FULL_CSV_PATH" ]]; then
    echo "gen${generation}-001"
    return
  fi
  
  # Use Python for proper CSV parsing
  local max_id
  max_id=$("$PYTHON_CMD" -c "
import csv
import re
max_id = 0
pattern = re.compile(r'^gen${generation}-(\d+)$')
with open('$FULL_CSV_PATH', 'r') as f:
    reader = csv.reader(f)
    next(reader, None)  # Skip header
    for row in reader:
        if row and len(row) > 0:
            id_field = row[0].strip()
            match = pattern.match(id_field)
            if match:
                id_num = int(match.group(1))
                max_id = max(max_id, id_num)
print(max_id)
")
  
  # Format next ID with generation and 3-digit number
  printf "gen%s-%03d" "$generation" $((max_id + 1))
}


# Get top performers for parent selection (absolute + top novel candidates)
get_top_performers() {
  local num_requested="$1"
  if [[ ! -f "$FULL_CSV_PATH" ]]; then
    echo ""
    return
  fi
  
  # Use Python to properly parse CSV and find top performers + top novel candidates
  "$PYTHON_CMD" -c "
import csv
import sys

with open('$FULL_CSV_PATH', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    
    completed = []
    novel = []
    
    # Collect all completed candidates
    for row in reader:
        if len(row) >= 5 and row[3] and row[4] == 'complete':
            try:
                candidate_id = row[0]
                parent_id = row[1] if len(row) > 1 else ''
                description = row[2] if len(row) > 2 else ''
                score = float(row[3])
                
                completed.append((candidate_id, description, score))
                
                # Track novel candidates separately
                if not parent_id:
                    novel.append((candidate_id, description, score))
                    
            except ValueError:
                pass
    
    # Sort absolute leaders by score (descending)
    completed.sort(key=lambda x: x[2], reverse=True)
    
    # Sort novel candidates by score (descending)
    novel.sort(key=lambda x: x[2], reverse=True)
    
    # Collect top performers
    selected_ids = set()
    results = []
    
    # Add top absolute performers
    for i, (candidate_id, description, score) in enumerate(completed[:$num_requested]):
        results.append(f'{candidate_id},{description},{score}')
        selected_ids.add(candidate_id)
    
    # Add top novel candidates (if not already selected)
    novel_count = 0
    for candidate_id, description, score in novel:
        if candidate_id not in selected_ids and novel_count < $NUM_REVOLUTION:
            results.append(f'{candidate_id},{description},{score}')
            selected_ids.add(candidate_id)
            novel_count += 1
    
    # Output all selected candidates
    for result in results:
        print(result)
"
}



# Generate ideas using AI with multi-strategy approach
ideate_ai_strategies() {
  if [[ ! -f "$FULL_BRIEF_PATH" ]]; then
    echo "[ERROR] $BRIEF_FILE not found. Run 'claude-evolve setup' first." >&2
    exit 1
  fi

  # Baseline should already be evaluated by run command

  # Get top performers (now includes top novel candidates)
  local top_performers
  top_performers=$(get_top_performers "$NUM_ELITES")
  
  if [[ -z $top_performers ]]; then
    echo "[INFO] No completed algorithms found, will use baseline algorithm for hill climbing"
    # For hill climbing and mutations, use the baseline algorithm
    top_performers="Baseline Algorithm (algorithm.py): The original algorithm provided"
  fi

  echo "[INFO] Generating $TOTAL_IDEAS ideas using multi-strategy approach:"
  echo "  Novel exploration: $NOVEL_EXPLORATION"
  echo "  Hill climbing: $HILL_CLIMBING" 
  echo "  Structural mutation: $STRUCTURAL_MUTATION"
  echo "  Crossover hybrid: $CROSSOVER_HYBRID"

  # Generate each type of idea by having Claude directly edit the CSV
  [[ $NOVEL_EXPLORATION -gt 0 ]] && generate_novel_ideas_direct "$NOVEL_EXPLORATION"
  [[ $HILL_CLIMBING -gt 0 ]] && generate_hill_climbing_direct "$HILL_CLIMBING" "$top_performers"
  [[ $STRUCTURAL_MUTATION -gt 0 ]] && generate_structural_mutation_direct "$STRUCTURAL_MUTATION" "$top_performers"
  [[ $CROSSOVER_HYBRID -gt 0 ]] && generate_crossover_direct "$CROSSOVER_HYBRID" "$top_performers"
}

# Generate novel exploration ideas using structured output
generate_novel_ideas_direct() {
  local count="$1"
  
  # Get next available ID for this generation
  local next_id_num
  next_id_num=$("$PYTHON_CMD" -c "
import csv
import re
max_id = 0
pattern = re.compile(r'^gen$CURRENT_GENERATION-(\d+)$')
with open('$FULL_CSV_PATH', 'r') as f:
    reader = csv.reader(f)
    next(reader, None)  # Skip header
    for row in reader:
        if row and len(row) > 0:
            match = pattern.match(row[0].strip())
            if match:
                max_id = max(max_id, int(match.group(1)))
print(max_id + 1)
")
  
  local prompt="Generate exactly $count novel algorithmic ideas for trading algorithm evolution.

Current evolution context:
- Generation: $CURRENT_GENERATION
- Algorithm: $FULL_ALGORITHM_PATH
- Brief: $(head -20 "$FULL_BRIEF_PATH")

You MUST output EXACTLY $count lines, where each line is a single sentence describing a specific algorithmic change.
NO PREAMBLE, NO EXPLANATION, NO NUMBERING - just $count lines of algorithm descriptions.

Requirements:
- Each line should be one clear sentence describing a novel algorithmic approach
- Focus on creative, ambitious ideas that haven't been tried yet
- Consider machine learning, new indicators, regime detection, risk management, etc.

Example output format:
Train LSTM network on 30-day OHLCV sequences to predict next-day direction probability
Add cross-correlation filter that reduces positions when correlation with market breaks down
Implement intraday momentum using 30-minute data to adjust daily position sizes

Output exactly $count lines now:"

  echo "[INFO] Generating $count novel exploration ideas..."
  
  # Get AI response
  local ai_output
  local ai_error
  if ! ai_output=$(call_ai_with_limit_check "$prompt" "$CURRENT_GENERATION" 2>&1); then
    ai_error="$ai_output"
    
    # Check for specific error types
    if echo "$ai_error" | grep -qi "rate.*limit\|too.*many.*requests"; then
      echo "[ERROR] Hit API rate limit. Please wait a moment and try again." >&2
    elif echo "$ai_error" | grep -qi "unauthorized\|api.*key\|authentication"; then
      # Try to identify which provider failed
      if echo "$ai_error" | grep -qi "codex\|o3"; then
        echo "[ERROR] Codex/O3 authentication issue. Please check your Codex API key." >&2
      elif echo "$ai_error" | grep -qi "gemini"; then
        echo "[ERROR] Gemini authentication issue. Please check your Gemini API key." >&2
      elif echo "$ai_error" | grep -qi "claude\|anthropic"; then
        echo "[ERROR] Claude authentication issue. Please check your Anthropic API key." >&2
      else
        echo "[ERROR] API authentication issue. Please check your API key configuration." >&2
        echo "[ERROR] Last attempted model was from generation $CURRENT_GENERATION strategy" >&2
      fi
    elif echo "$ai_error" | grep -qi "timeout\|timed.*out"; then
      echo "[ERROR] Request timed out. The prompt may be too complex." >&2
    else
      echo "[ERROR] AI request failed: $ai_error" >&2
    fi
    return 1
  fi
  
  # Process the output using helper function
  process_ai_ideas "$ai_output" "$count" "novel"
  
  echo "[INFO] Novel exploration ideas generated successfully"
}

# Generate hill climbing ideas by getting descriptions from AI
generate_hill_climbing_direct() {
  local count="$1"
  local top_performers="$2"
  
  # Get next available ID for this generation
  local next_id_num
  next_id_num=$("$PYTHON_CMD" -c "
import csv
import re
max_id = 0
pattern = re.compile(r'^gen$CURRENT_GENERATION-(\d+)$')
with open('$FULL_CSV_PATH', 'r') as f:
    reader = csv.reader(f)
    next(reader, None)  # Skip header
    for row in reader:
        if row and len(row) > 0:
            match = pattern.match(row[0].strip())
            if match:
                max_id = max(max_id, int(match.group(1)))
print(max_id + 1)
")
  
  local prompt="Generate exactly $count parameter tuning ideas for successful trading algorithms.

Successful algorithms to tune (pick one as parent):
$top_performers

You MUST output EXACTLY $count lines, where each line describes a parameter tuning idea.
NO PREAMBLE, NO EXPLANATION, NO NUMBERING - just $count lines of parameter tuning descriptions.

Each line should:
- Be one clear sentence about adjusting specific parameters
- Reference the parent algorithm ID at the beginning like \"From gen02-003:\"
- Focus on hyperparameters, thresholds, periods, weights, etc.

Example output format:
From gen02-003: Lower IBS_BUY_THRESHOLD from 0.15 to 0.12 to enter deeper oversold conditions
From gen02-003: Increase TRS_RSI_PERIOD from 2 to 3 for smoother RSI signals
From gen02-003: Raise WEIGHT_TDD from 0.38 to 0.42 to emphasize best performing strategy

Output exactly $count lines now:"

  echo "[INFO] Generating $count hill climbing ideas..."
  
  # Get AI response
  local ai_output
  local ai_error
  if ! ai_output=$(call_ai_with_limit_check "$prompt" "$CURRENT_GENERATION" 2>&1); then
    ai_error="$ai_output"
    
    # Check for specific error types
    if echo "$ai_error" | grep -qi "rate.*limit\|too.*many.*requests"; then
      echo "[ERROR] Hit API rate limit. Please wait a moment and try again." >&2
    elif echo "$ai_error" | grep -qi "unauthorized\|api.*key\|authentication"; then
      echo "[ERROR] API authentication issue. Please check your API key." >&2
    elif echo "$ai_error" | grep -qi "timeout\|timed.*out"; then
      echo "[ERROR] Request timed out. The prompt may be too complex." >&2
    elif echo "$ai_error" | grep -qi "token.*limit\|too.*long\|maximum.*length"; then
      echo "[ERROR] Prompt exceeded token limit. Try reducing the number of top performers." >&2
    else
      echo "[ERROR] AI request failed: $ai_error" >&2
    fi
    
    echo "[INFO] Hill climbing can work with ANY completed algorithm - even baseline" >&2
    echo "[INFO] Each algorithm has parameters that can be tuned for improvement" >&2
    return 1
  fi
  
  # Process the output using helper function
  process_ai_ideas "$ai_output" "$count" "hill-climbing" "$top_performers"
  
  echo "[INFO] Hill climbing ideas generated successfully"
}

# Generate structural mutation ideas by getting descriptions from AI
generate_structural_mutation_direct() {
  local count="$1"
  local top_performers="$2"
  
  local prompt="Generate exactly $count structural modification ideas for successful trading algorithms.

Successful algorithms to modify structurally:
$top_performers

You MUST output EXACTLY $count lines, where each line describes a structural modification idea.
NO PREAMBLE, NO EXPLANATION, NO NUMBERING - just $count lines of structural change descriptions.

Each line should:
- Be one clear sentence about architectural/structural changes
- Reference the parent algorithm ID at the beginning like \"From gen02-003:\"
- Focus on replacing components, changing architecture, adding new systems

Example output format:
From gen02-003: Replace 2-period RSI with LSTM-predicted momentum scores for TRS strategy
From gen02-003: Add ensemble voting system where sub-strategies vote on market regime
From gen02-003: Implement hierarchical risk budgeting with correlation-adjusted position sizing

Output exactly $count lines now:"

  echo "[INFO] Generating $count structural mutation ideas..."
  
  # Get AI response
  local ai_output
  local ai_error
  if ! ai_output=$(call_ai_with_limit_check "$prompt" "$CURRENT_GENERATION" 2>&1); then
    ai_error="$ai_output"
    
    # Check for specific error types
    if echo "$ai_error" | grep -qi "rate.*limit\|too.*many.*requests"; then
      echo "[ERROR] Hit API rate limit. Please wait a moment and try again." >&2
    elif echo "$ai_error" | grep -qi "unauthorized\|api.*key\|authentication"; then
      # Try to identify which provider failed
      if echo "$ai_error" | grep -qi "codex\|o3"; then
        echo "[ERROR] Codex/O3 authentication issue. Please check your Codex API key." >&2
      elif echo "$ai_error" | grep -qi "gemini"; then
        echo "[ERROR] Gemini authentication issue. Please check your Gemini API key." >&2
      elif echo "$ai_error" | grep -qi "claude\|anthropic"; then
        echo "[ERROR] Claude authentication issue. Please check your Anthropic API key." >&2
      else
        echo "[ERROR] API authentication issue. Please check your API key configuration." >&2
        echo "[ERROR] Last attempted model was from generation $CURRENT_GENERATION strategy" >&2
      fi
    elif echo "$ai_error" | grep -qi "timeout\|timed.*out"; then
      echo "[ERROR] Request timed out. The prompt may be too complex." >&2
    else
      echo "[ERROR] AI request failed: $ai_error" >&2
    fi
    return 1
  fi
  
  # Process the output using helper function
  process_ai_ideas "$ai_output" "$count" "structural" "$top_performers"
  
  echo "[INFO] Structural mutation ideas generated successfully"
}

# Generate crossover hybrid ideas by getting descriptions from AI
generate_crossover_direct() {
  local count="$1"
  local top_performers="$2"
  
  local prompt="Generate exactly $count hybrid combination ideas from successful trading algorithms.

Top performers to combine (reference at least 2 in each idea):
$top_performers

You MUST output EXACTLY $count lines, where each line describes a hybrid combination idea.
NO PREAMBLE, NO EXPLANATION, NO NUMBERING - just $count lines of hybrid combination descriptions.

Each line should:
- Be one clear sentence combining elements from 2+ successful algorithms
- Reference the base parent algorithm ID at the beginning like \"From gen02-003:\"
- Explicitly mention which elements to combine from which algorithms

Example output format:
From gen02-003: Combine VIX regime filter from gen02-003 with LSTM predictions from gen01-005
From gen02-003: Merge volatility regime detection from gen02-003 with ML momentum from gen01-007
From gen02-003: Integrate multi-timeframe signals from gen02-003 with correlation sizing from gen01-009

Output exactly $count lines now:"

  echo "[INFO] Generating $count crossover hybrid ideas..."
  
  # Get AI response
  local ai_output
  local ai_error
  if ! ai_output=$(call_ai_with_limit_check "$prompt" "$CURRENT_GENERATION" 2>&1); then
    ai_error="$ai_output"
    
    # Check for specific error types
    if echo "$ai_error" | grep -qi "rate.*limit\|too.*many.*requests"; then
      echo "[ERROR] Hit API rate limit. Please wait a moment and try again." >&2
    elif echo "$ai_error" | grep -qi "unauthorized\|api.*key\|authentication"; then
      # Try to identify which provider failed
      if echo "$ai_error" | grep -qi "codex\|o3"; then
        echo "[ERROR] Codex/O3 authentication issue. Please check your Codex API key." >&2
      elif echo "$ai_error" | grep -qi "gemini"; then
        echo "[ERROR] Gemini authentication issue. Please check your Gemini API key." >&2
      elif echo "$ai_error" | grep -qi "claude\|anthropic"; then
        echo "[ERROR] Claude authentication issue. Please check your Anthropic API key." >&2
      else
        echo "[ERROR] API authentication issue. Please check your API key configuration." >&2
        echo "[ERROR] Last attempted model was from generation $CURRENT_GENERATION strategy" >&2
      fi
    elif echo "$ai_error" | grep -qi "timeout\|timed.*out"; then
      echo "[ERROR] Request timed out. The prompt may be too complex." >&2
    else
      echo "[ERROR] AI request failed: $ai_error" >&2
    fi
    return 1
  fi
  
  # Process the output using helper function
  process_ai_ideas "$ai_output" "$count" "crossover" "$top_performers"
  
  echo "[INFO] Crossover hybrid ideas generated successfully"
}

# Legacy AI generation mode (for backward compatibility)
ideate_ai_legacy() {
  if [[ ! -f "$FULL_BRIEF_PATH" ]]; then
    echo "[ERROR] $BRIEF_FILE not found. Run 'claude-evolve setup' first." >&2
    exit 1
  fi

  # Get top performers for context
  local top_performers=""
  if [[ -f "$FULL_CSV_PATH" ]]; then
    # Simple top performers extraction (lines with non-empty performance)
    top_performers=$(awk -F, 'NR > 1 && $4 != "" { print $1 ": " $3 " (score: " $4 ")" }' "$FULL_CSV_PATH" | head -5)
  fi

  # Build prompt for description-only output
  local prompt="Generate exactly $TOTAL_IDEAS novel algorithmic ideas for trading algorithm evolution.

Algorithm files for context:
- Base algorithm: $FULL_ALGORITHM_PATH  
- Evolved algorithms: $FULL_OUTPUT_DIR/evolution_*.py

IMPORTANT: Before generating ideas, you should:
1. Read the base algorithm to understand the codebase structure and possibilities
2. Read ALL existing evolution_*.py files to see what modifications have been attempted
3. Consider which approaches might work well

Project Brief:
$(cat "$FULL_BRIEF_PATH")"

  if [[ -n $top_performers ]]; then
    prompt+="

Top Performing Algorithms So Far:
$top_performers"
  fi

  prompt+="

You MUST output EXACTLY $TOTAL_IDEAS lines, where each line is a single sentence describing a specific algorithmic change.
NO PREAMBLE, NO EXPLANATION, NO NUMBERING - just $TOTAL_IDEAS lines of algorithm descriptions.

Requirements:
- Each line should be one clear sentence describing an algorithmic approach
- Mix both parameter tuning and structural changes
- If building on existing algorithms, start with 'From ALGORITHM_ID:'

⚠️ AVOID ONLY: Kelly floor/cap adjustments that assume leverage > 1.0 (these get clamped and have no effect)

✅ EXPLORE ALL CREATIVE POSSIBILITIES INCLUDING:
- Machine Learning: Neural networks, ensemble methods, reinforcement learning (use train() method)
- Advanced Indicators: Custom combinations, multi-timeframe signals, cross-asset indicators
- Market Regime Detection: VIX patterns, correlation analysis, volatility clustering
- Risk Management: Dynamic stops, portfolio heat, correlation-based position sizing
- Alternative Strategies: New sub-strategies, momentum variants, mean reversion innovations
- Multi-Asset Signals: Sector rotation, bond yields, commodity signals
- Time-Based Patterns: Intraday effects, calendar anomalies, volatility timing
- Parameter Optimization: Entry thresholds, indicator periods, strategy weights

Output exactly $TOTAL_IDEAS lines now:"

  echo "[INFO] Generating $TOTAL_IDEAS ideas (legacy mode)..."
  
  # Get AI response
  local ai_output
  if ! ai_output=$(call_ai_with_limit_check "$prompt" "$CURRENT_GENERATION" 2>&1); then
    echo "[WARN] AI failed to generate ideas" >&2
    return 1
  fi
  
  # Process the output using helper function
  # For legacy mode, we treat all as "novel" since we're not specifying a strategy
  process_ai_ideas "$ai_output" "$TOTAL_IDEAS" "novel"
  
  echo "[INFO] Legacy ideas generated"
}

# Determine generation number for this ideation run
CURRENT_GENERATION=$(get_next_generation)
echo "[INFO] Starting ideation for generation $CURRENT_GENERATION"

# Main execution
if [[ $use_strategies == true ]]; then
  echo "[INFO] Multi-strategy AI generation mode"
  ideate_ai_strategies
  echo "[INFO] Ideation complete! Check $EVOLUTION_CSV for new ideas."
else
  echo "[INFO] Legacy AI generation mode"
  ideate_ai_legacy
  echo "[INFO] Ideation complete! Check $EVOLUTION_CSV for new ideas."
fi