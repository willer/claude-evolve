#!/bin/bash

set -e

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/config.sh
source "$SCRIPT_DIR/../lib/config.sh"

# Use CLAUDE_EVOLVE_CONFIG if set, otherwise default
if [[ -n ${CLAUDE_EVOLVE_CONFIG:-} ]]; then
  load_config "$CLAUDE_EVOLVE_CONFIG"
else
  # Check if config.yaml exists in current directory
  if [[ -f "config.yaml" ]]; then
    # Don't export to avoid collision with parallel runs
    CONFIG_FILE="$(pwd)/config.yaml"
    load_config "$CONFIG_FILE"
  else
    load_config
  fi
fi

# Validate configuration
if ! validate_config; then
  echo "[ERROR] Configuration validation failed" >&2
  exit 1
fi

# Function to show help
show_help() {
  cat <<EOF
claude-evolve status - Show evolution progress and current leader

USAGE:
  claude-evolve status [OPTIONS]

OPTIONS:
  --brief     Show only summary stats (no per-generation breakdown)
  --winner    Show only the current best performer
  --help      Show this help message

DESCRIPTION:
  Displays evolution progress by generation including:
  - Candidate counts by status (pending, complete, failed, running)
  - Current best performer across all generations
  - Generation-by-generation breakdown

EXAMPLES:
  claude-evolve status          # Full status report
  claude-evolve status --brief  # Just totals and winner
  claude-evolve status --winner # Just the best performer
EOF
}

# Parse arguments
SHOW_BRIEF=false
SHOW_WINNER_ONLY=false

while [[ $# -gt 0 ]]; do
  case $1 in
  --brief)
    SHOW_BRIEF=true
    shift
    ;;
  --winner)
    SHOW_WINNER_ONLY=true
    shift
    ;;
  --help)
    show_help
    exit 0
    ;;
  *)
    echo "[ERROR] Unknown option: $1" >&2
    exit 1
    ;;
  esac
done

# Check if CSV exists
if [[ ! -f "$FULL_CSV_PATH" ]]; then
  echo "[ERROR] Evolution CSV not found: $FULL_CSV_PATH" >&2
  echo "Run 'claude-evolve setup' first or navigate to the correct directory" >&2
  exit 1
fi

# Determine what we're evolving based on paths
EVOLUTION_CONTEXT=""
if [[ -n "$EVOLUTION_DIR" ]]; then
  # Get the evolution directory name (e.g., "evolution-atr" -> "ATR")
  EVOLUTION_NAME=$(basename "$EVOLUTION_DIR")
  EVOLUTION_CONTEXT="${EVOLUTION_NAME#evolution-}"
  EVOLUTION_CONTEXT=$(echo "$EVOLUTION_CONTEXT" | tr '[:lower:]' '[:upper:]')
fi

# If we can't determine from evolution dir, try from algorithm path
if [[ -z "$EVOLUTION_CONTEXT" && -n "$ALGORITHM_PATH" ]]; then
  # Get parent directory name or algorithm file name
  if [[ -f "$FULL_ALGORITHM_PATH" ]]; then
    ALGO_NAME=$(basename "$FULL_ALGORITHM_PATH" .py)
    EVOLUTION_CONTEXT="$ALGO_NAME"
  fi
fi

# Default if we still can't determine
if [[ -z "$EVOLUTION_CONTEXT" ]]; then
  EVOLUTION_CONTEXT="Algorithm"
fi

# Main status reporting using Python
"$PYTHON_CMD" -c "
import csv
import sys
import re

csv_file = '$FULL_CSV_PATH'
show_brief = '$SHOW_BRIEF' == 'true'
show_winner_only = '$SHOW_WINNER_ONLY' == 'true'
evolution_context = '$EVOLUTION_CONTEXT'
num_novel_to_show = int('${NUM_REVOLUTION:-2}')

def normalize_status(status):
    '''Convert retry statuses to base status for counting.'''
    if status.startswith('failed'):
        return 'failed'
    return status

def is_retry_status(status):
    '''Check if status is a retry status.'''
    return bool(re.match(r'^failed-retry[0-9]+$', status))

try:
    with open(csv_file, 'r') as f:
        reader = csv.reader(f)
        rows = list(reader)
    
    if len(rows) <= 1:
        print('No evolution candidates found')
        sys.exit(0)
    
    header = rows[0]
    
    # Collect all candidates with scores and statuses
    all_candidates = []
    stats_by_gen = {}
    winners_by_gen = {}
    total_stats = {'pending': 0, 'complete': 0, 'failed': 0, 'running': 0, 'skipped': 0}
    retry_count = 0
    
    def parse_candidate_id(cid):
        try:
            left, right = cid.split('-', 1)
            gen_num = int(left[3:]) if left.startswith('gen') else 10**9
            seq_num = int(right)
            return gen_num, seq_num
        except Exception:
            return 10**9, 10**9

    def is_earlier(a, b):
        ga, sa = parse_candidate_id(a)
        gb, sb = parse_candidate_id(b)
        return (ga, sa) < (gb, sb)


    for row in rows[1:]:
        if len(row) >= 1 and row[0]:  # Must have an ID
            candidate_id = row[0]
            
            # Extract generation (e.g., 'gen03' from 'gen03-001')
            if '-' in candidate_id:
                gen = candidate_id.split('-')[0]
                
                # Get status and performance
                status = row[4] if len(row) > 4 and row[4] else 'pending'
                performance = row[3] if len(row) > 3 and row[3] else ''
                
                # Normalize status (failed-retry* becomes failed)
                normalized_status = normalize_status(status)
                
                # Count retries
                if is_retry_status(status):
                    retry_count += 1
                
                # Track by generation
                if gen not in stats_by_gen:
                    stats_by_gen[gen] = {'pending': 0, 'complete': 0, 'failed': 0, 'running': 0, 'skipped': 0}
                
                if normalized_status in stats_by_gen[gen]:
                    stats_by_gen[gen][normalized_status] += 1
                    total_stats[normalized_status] += 1
                else:
                    stats_by_gen[gen]['pending'] += 1
                    total_stats['pending'] += 1
                
                # Collect for winner analysis (only completed with valid scores)
                if normalized_status == 'complete' and performance:
                    try:
                        score = float(performance)
                        description = row[2] if len(row) > 2 else 'No description'
                        all_candidates.append((candidate_id, description, score))

                        # Track per-generation best with raw score; ties -> earlier ID
                        if gen not in winners_by_gen:
                            winners_by_gen[gen] = (candidate_id, description, score)
                        else:
                            cid, _, best_score = winners_by_gen[gen]
                            if score > best_score or (score == best_score and is_earlier(candidate_id, cid)):
                                winners_by_gen[gen] = (candidate_id, description, score)
                    except ValueError:
                        pass
    
    # Find the winner using raw score; ties -> earliest ID
    winner = None
    for cid, desc, sc in all_candidates:
        if winner is None:
            winner = (cid, desc, sc)
        else:
            wc = winner[2]
            if sc > wc or (sc == wc and is_earlier(cid, winner[0])):
                winner = (cid, desc, sc)
    
    
    # Show winner only
    if show_winner_only:
        if winner:
            print(f'🏆 CURRENT LEADER: {winner[0]} (score: {winner[2]:.4f})')
            print(f'   {winner[1]}')
        else:
            print('No completed candidates found')
        sys.exit(0)
    
    # Show header
    print(f'🧬 Evolution Status Report - {evolution_context}')
    print('=' * 50)
    
    # Show overall stats
    total_candidates = sum(total_stats.values())
    if total_candidates > 0:
        print(f'📊 OVERALL: {total_candidates} total candidates')
        print(f'   • {total_stats[\"pending\"]} pending')
        print(f'   • {total_stats[\"complete\"]} complete') 
        failed_display = f'{total_stats[\"failed\"]} failed'
        if retry_count > 0:
            failed_display += f' ({retry_count} retries)'
        print(f'   • {failed_display}')
        if total_stats['running'] > 0:
            print(f'   • {total_stats[\"running\"]} running')
        if total_stats['skipped'] > 0:
            print(f'   • {total_stats[\"skipped\"]} skipped')
        print()
    
    # Show current winner
    if winner:
        print(f'🏆 CURRENT LEADER: {winner[0]} (score: {winner[2]:.4f})')
        print(f'   {winner[1]}')
        print()
    else:
        print('🏆 CURRENT LEADER: None (no completed candidates)')
        print()
    
    # Show top novel candidates
    novel_candidates = []
    for row in rows[1:]:
        if len(row) >= 5 and row[3] and row[4] == 'complete' and not row[1]:
            try:
                candidate_id = row[0]
                description = row[2] if len(row) > 2 else ''
                score = float(row[3])
                novel_candidates.append((candidate_id, description, score))
            except ValueError:
                pass
    
    if novel_candidates:
        novel_candidates.sort(key=lambda x: x[2], reverse=True)
        print(f'🌟 TOP NOVEL CANDIDATES:')
        # Use the num_novel_to_show variable set at the top
        for i, (candidate_id, description, score) in enumerate(novel_candidates[:num_novel_to_show]):
            print(f'   {i+1}. {candidate_id} (score: {score:.4f})')
            print(f'      {description}')
        print()
    
    # Show per-generation breakdown (unless brief mode)
    if not show_brief and stats_by_gen:
        print('📈 BY GENERATION:')
        # Sort generations numerically by extracting the number after 'gen'
        sorted_gens = sorted(stats_by_gen.keys(), key=lambda g: int(g[3:]) if g.startswith('gen') and g[3:].isdigit() else 0)
        for gen in sorted_gens:
            data = stats_by_gen[gen]
            total = sum(data.values())
            
            # Find best performer in this generation (using precomputed winners_by_gen)
            gen_best = winners_by_gen.get(gen)
            
            status_str = f'{data[\"pending\"]}p {data[\"complete\"]}c {data[\"failed\"]}f {data[\"running\"]}r'
            if data['skipped'] > 0:
                status_str += f' {data[\"skipped\"]}s'
            
            if gen_best:
                # Check if this generation's best is the overall winner
                if winner and gen_best[0] == winner[0]:
                    # Highlight in green if it's the overall winner
                    print(f'   {gen}: {total} total ({status_str}) - best: \033[32m{gen_best[0]} ({gen_best[2]:.4f})\033[0m')
                else:
                    print(f'   {gen}: {total} total ({status_str}) - best: {gen_best[0]} ({gen_best[2]:.4f})')
            else:
                print(f'   {gen}: {total} total ({status_str}) - best: none')

except Exception as e:
    print(f'Error reading evolution status: {e}')
    sys.exit(1)
"
