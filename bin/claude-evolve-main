#!/bin/bash

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get script directory (resolve symlinks for global install)
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || echo "${BASH_SOURCE[0]}")")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Get version from package.json
get_version() {
  # Try package.json in project root first
  if [[ -f "$PROJECT_ROOT/package.json" ]]; then
    grep '"version"' "$PROJECT_ROOT/package.json" | sed 's/.*"version": *"\([^"]*\)".*/\1/'
  # If not found, try npm list (for global installs)
  elif command -v npm >/dev/null 2>&1; then
    npm list -g claude-evolve --depth=0 2>/dev/null | grep claude-evolve | sed 's/.*@//' || echo "1.0.1"
  else
    echo "1.0.1"
  fi
}

# Function to check for updates and auto-update if needed
check_for_updates() {
  # Only check if we can reach npm registry quickly
  if timeout 2 npm view claude-evolve version >/dev/null 2>&1; then
    local current_version
    current_version=$(npm list -g claude-evolve --depth=0 2>/dev/null | grep claude-evolve | sed 's/.*@//' | sed 's/ ->.*//')
    local latest_version
    latest_version=$(timeout 2 npm view claude-evolve version 2>/dev/null)
    
    if [[ -n $current_version ]] && [[ -n $latest_version ]] && [[ $current_version != "$latest_version" ]]; then
      echo -e "${YELLOW}üì¶ Update available: claude-evolve $current_version ‚Üí $latest_version${NC}"
      echo -e "${GREEN}üîÑ Auto-updating claude-evolve...${NC}"
      
      # Attempt automatic update
      if npm update -g claude-evolve >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Successfully updated to claude-evolve $latest_version${NC}"
        echo
      else
        echo -e "${YELLOW}‚ö†Ô∏è  Auto-update failed. Please run manually: npm update -g claude-evolve${NC}"
        echo
      fi
    fi
  fi
}

show_help() {
  cat <<EOF
claude-evolve - AI-powered algorithm evolution tool

USAGE:
    claude-evolve [--working-dir=PATH] [COMMAND] [OPTIONS]

COMMANDS:
    setup              Initialize evolution workspace
    ideate             Generate new algorithm ideas
    run                Execute evolution candidates
    analyze            Analyze evolution results
    edit               Manage candidate statuses by generation
    status             Show evolution progress and current leader
    autostatus         Auto-updating status display (real-time)
    cleanup            Clean up unchanged algorithms and descendants
    clean-corrupted    Remove corrupted records from evolution CSV
    cleanup-duplicates Alias for cleanup (deprecated)
    help               Show this help message

GLOBAL OPTIONS:
    --working-dir=PATH  Use alternate working directory (default: evolution/)
    -h, --help          Show help message
    -v, --version       Show version

EXAMPLES:
    claude-evolve setup
    claude-evolve ideate 5
    claude-evolve run --timeout 300
    claude-evolve analyze --open
    claude-evolve --working-dir=evolution-abc run

For more information, visit: https://github.com/anthropics/claude-evolve
EOF
}

show_menu() {
  echo -e "${GREEN}üß¨ Claude Evolve - Algorithm Evolution Tool${NC}"
  echo
  echo "This tool helps you evolve algorithms using AI-powered mutations."
  echo
  echo "What would you like to do?"
  echo
  echo "  1) setup           - Initialize evolution workspace"
  echo "  2) ideate          - Generate new algorithm ideas"
  echo "  3) run             - Execute evolution candidates"
  echo "  4) analyze         - Analyze evolution results"
  echo "  5) edit            - Manage candidate statuses by generation"
  echo "  6) status          - Show evolution progress and current leader"
  echo "  7) autostatus      - Auto-updating status display (real-time)"
  echo "  8) clean-corrupted - Remove corrupted records from CSV"
  echo "  9) config          - Manage configuration settings"
  echo "  h) help            - Show help message"
  echo "  0) exit            - Exit"
  echo

  # Show workspace status
  echo "Current status:"
  [[ -d evolution ]] && echo "  ‚úì evolution/ workspace exists" || echo "  ‚úó evolution/ workspace missing"
  [[ -f evolution/BRIEF.md ]] && echo "  ‚úì BRIEF.md exists" || echo "  ‚úó BRIEF.md missing"
  [[ -f evolution/evolution.csv ]] && echo "  ‚úì evolution.csv exists" || echo "  ‚úó evolution.csv missing"
  echo
}

# Parse global options
WORKING_DIR=""
while [[ $# -gt 0 ]] && [[ "$1" =~ ^-- ]]; do
  case "$1" in
  --working-dir)
    if [[ -z ${2:-} ]]; then
      echo -e "${RED}[ERROR] --working-dir requires a directory path${NC}" >&2
      exit 1
    fi
    WORKING_DIR="$2"
    shift 2
    ;;
  --working-dir=*)
    WORKING_DIR="${1#*=}"
    shift
    ;;
  *)
    break
    ;;
  esac
done

# Auto-detect config.yaml in current directory if --working-dir not specified
if [[ -z $WORKING_DIR ]] && [[ -f "config.yaml" ]]; then
  WORKING_DIR="."
fi

# Export config file path for subcommands
if [[ -n $WORKING_DIR ]]; then
  # Remove trailing slash if present
  WORKING_DIR="${WORKING_DIR%/}"
  export CLAUDE_EVOLVE_WORKING_DIR="$WORKING_DIR"
fi

# Check for updates (quick, non-blocking)
check_for_updates

# Main logic
if [[ $# -eq 0 ]]; then
  show_menu
  read -r -p "Enter your choice (1-9, h, 0): " choice

  case $choice in
  1) exec "$SCRIPT_DIR/claude-evolve-setup" ;;
  2) exec "$SCRIPT_DIR/claude-evolve-ideate" ;;
  3) exec "$SCRIPT_DIR/claude-evolve-run" ;;
  4) exec "$SCRIPT_DIR/claude-evolve-analyze" ;;
  5) exec "$SCRIPT_DIR/claude-evolve-edit" ;;
  6) exec "$SCRIPT_DIR/claude-evolve-status" ;;
  7) exec "$SCRIPT_DIR/claude-evolve-autostatus" ;;
  8) exec "$SCRIPT_DIR/claude-evolve-clean-corrupted" ;;
  9) exec "$SCRIPT_DIR/claude-evolve-config" ;;
  h|H) show_help ;;
  0)
    echo "Goodbye!"
    exit 0
    ;;
  *)
    echo -e "${RED}Invalid choice. Please select 1-9, h, or 0.${NC}"
    exit 1
    ;;
  esac
fi

case "${1:-}" in
-h | --help | help)
  show_help
  ;;
-v | --version)
  echo "claude-evolve v$(get_version)"
  ;;
setup)
  shift
  exec "$SCRIPT_DIR/claude-evolve-setup" "$@"
  ;;
ideate)
  shift
  exec "$SCRIPT_DIR/claude-evolve-ideate" "$@"
  ;;
run)
  shift
  exec "$SCRIPT_DIR/claude-evolve-run" "$@"
  ;;
analyze)
  shift
  exec "$SCRIPT_DIR/claude-evolve-analyze" "$@"
  ;;
edit)
  shift
  exec "$SCRIPT_DIR/claude-evolve-edit" "$@"
  ;;
status)
  shift
  exec "$SCRIPT_DIR/claude-evolve-status" "$@"
  ;;
autostatus)
  shift
  exec "$SCRIPT_DIR/claude-evolve-autostatus" "$@"
  ;;
cleanup-duplicates|cleanup)
  shift
  exec "$SCRIPT_DIR/claude-evolve-cleanup" "$@"
  ;;
clean-corrupted)
  shift
  exec "$SCRIPT_DIR/claude-evolve-clean-corrupted" "$@"
  ;;
config)
  shift
  exec "$SCRIPT_DIR/claude-evolve-config" "$@"
  ;;
*)
  echo "Unknown command: ${1:-}"
  echo
  show_help
  exit 1
  ;;
esac
