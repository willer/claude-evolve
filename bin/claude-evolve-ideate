#!/bin/bash

set -e

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/config.sh
source "$SCRIPT_DIR/../lib/config.sh"
load_config

# Parse arguments
use_strategies=true
no_ai=false

while [[ $# -gt 0 ]]; do
  case $1 in
  --help)
    cat <<EOF
claude-evolve ideate - Generate new algorithm ideas using evolutionary strategies

USAGE:
  claude-evolve ideate [--legacy N] [--no-ai]

OPTIONS:
  --legacy N  Use legacy mode with N ideas (ignores strategy config)
  --no-ai     Use manual entry mode instead of AI generation
  --help      Show this help message

DESCRIPTION:
  Generates algorithm ideas using multi-strategy evolutionary approach:
  - Novel exploration: Pure creativity, global search
  - Hill climbing: Parameter tuning of top performers  
  - Structural mutation: Algorithmic changes to top performers
  - Crossover hybrid: Combine successful approaches
  
  Strategy distribution is configured in evolution/config.yaml
EOF
    exit 0
    ;;
  --legacy)
    use_strategies=false
    shift
    if [[ $1 =~ ^[0-9]+$ ]]; then
      TOTAL_IDEAS=$1
      shift
    else
      echo "[ERROR] --legacy requires a number" >&2
      exit 1
    fi
    ;;
  --no-ai)
    no_ai=true
    shift
    ;;
  *)
    echo "[ERROR] Unknown option: $1" >&2
    exit 1
    ;;
  esac
done

# Check workspace using config
if [[ ! -d "$FULL_EVOLUTION_DIR" ]]; then
  echo "[ERROR] Evolution workspace not found: $FULL_EVOLUTION_DIR. Run 'claude-evolve setup' first." >&2
  exit 1
fi

# Ensure CSV exists
if [[ ! -f "$FULL_CSV_PATH" ]]; then
  echo "id,basedOnId,description,performance,status" >"$FULL_CSV_PATH"
fi

# Validate strategy configuration
if [[ $use_strategies == true ]]; then
  total_check=$((NOVEL_EXPLORATION + HILL_CLIMBING + STRUCTURAL_MUTATION + CROSSOVER_HYBRID))
  if [[ $total_check -ne $TOTAL_IDEAS ]]; then
    echo "[ERROR] Strategy counts don't sum to total_ideas ($total_check != $TOTAL_IDEAS)" >&2
    echo "Check your evolution/config.yaml configuration" >&2
    exit 1
  fi
fi

# Get next available ID
get_next_id() {
  if [[ ! -f "$FULL_CSV_PATH" ]]; then
    echo "1"
    return
  fi
  # Find highest ID and increment (pure shell)
  local max_id=0
  while IFS=, read -r id rest; do
    if [[ $id =~ ^[0-9]+$ ]] && (( 10#$id > max_id )); then
      max_id=$((10#$id))
    fi
  done < <(tail -n +2 "$FULL_CSV_PATH")
  echo $((max_id + 1))
}

# Add idea to CSV manually (fallback for manual mode)
add_idea_manual() {
  local description="$1"
  local based_on_id="$2"
  local id
  id=$(get_next_id)

  # Escape quotes in description
  local escaped_desc="${description//\"/\"\"}"

  # Append to CSV
  echo "${id},${based_on_id},\"${escaped_desc}\",," >>"$FULL_CSV_PATH"
  echo "[INFO] Added idea: $description"
}

# Get top performers for parent selection
get_top_performers() {
  local num_requested="$1"
  if [[ ! -f "$FULL_CSV_PATH" ]]; then
    echo ""
    return
  fi
  
  # Get completed algorithms with performance scores, sort by performance descending
  awk -F, 'NR > 1 && $4 != "" && $5 == "complete" { print $1 "," $3 "," $4 }' "$FULL_CSV_PATH" | \
    sort -t, -k3 -nr | \
    head -n "$num_requested"
}

# Manual entry mode
ideate_manual() {
  local ideas_added=0

  for ((i = 1; i <= TOTAL_IDEAS; i++)); do
    if [[ $TOTAL_IDEAS -eq 1 ]]; then
      read -r -p "Enter algorithm idea (or empty to skip): " description
    else
      read -r -p "Enter algorithm idea $i/$TOTAL_IDEAS (or empty to skip): " description
    fi

    if [[ -z $description ]]; then
      echo "[INFO] Empty description, skipping idea"
      continue
    fi

    add_idea_manual "$description" ""
    ((ideas_added++))

    if [[ $i -lt $TOTAL_IDEAS ]]; then
      read -r -p "Add another idea? (y/N) " continue_adding
      if [[ $continue_adding != "y" && $continue_adding != "Y" ]]; then
        break
      fi
    fi
  done

  echo "[INFO] Added $ideas_added idea(s) to $EVOLUTION_CSV"
}

# Generate ideas using AI with multi-strategy approach
ideate_ai_strategies() {
  # Check for claude CLI
  if ! command -v claude >/dev/null 2>&1; then
    echo "[WARN] Claude CLI not found. Falling back to manual entry."
    return 1
  fi

  if [[ ! -f "$FULL_BRIEF_PATH" ]]; then
    echo "[WARN] $BRIEF_FILE not found. Falling back to manual entry."
    return 1
  fi

  # Get top performers
  local top_performers
  top_performers=$(get_top_performers "$NUM_ELITES")
  
  if [[ -z $top_performers ]]; then
    echo "[INFO] No completed algorithms found, using pure novel exploration"
    # Generate all ideas as novel exploration
    generate_novel_ideas_direct "$TOTAL_IDEAS"
    return 0
  fi

  echo "[INFO] Generating $TOTAL_IDEAS ideas using multi-strategy approach:"
  echo "  Novel exploration: $NOVEL_EXPLORATION"
  echo "  Hill climbing: $HILL_CLIMBING" 
  echo "  Structural mutation: $STRUCTURAL_MUTATION"
  echo "  Crossover hybrid: $CROSSOVER_HYBRID"

  # Generate each type of idea by having Claude directly edit the CSV
  [[ $NOVEL_EXPLORATION -gt 0 ]] && generate_novel_ideas_direct "$NOVEL_EXPLORATION"
  [[ $HILL_CLIMBING -gt 0 ]] && generate_hill_climbing_direct "$HILL_CLIMBING" "$top_performers"
  [[ $STRUCTURAL_MUTATION -gt 0 ]] && generate_structural_mutation_direct "$STRUCTURAL_MUTATION" "$top_performers"
  [[ $CROSSOVER_HYBRID -gt 0 ]] && generate_crossover_direct "$CROSSOVER_HYBRID" "$top_performers"
}

# Generate novel exploration ideas by having Claude edit CSV directly
generate_novel_ideas_direct() {
  local count="$1"
  
  local prompt="Edit the file $FULL_CSV_PATH to add exactly $count new rows for novel algorithmic approaches.

Current CSV content:
$(cat "$FULL_CSV_PATH")

Project Brief:
$(cat "$FULL_BRIEF_PATH")

Requirements for new CSV rows:
- IDs must be numbers only (suitable for filenames)
- basedOnId should be empty (these are novel approaches) 
- Each description should be one clear sentence describing a specific algorithmic change
- Descriptions should explore completely different approaches than existing ones
- All new rows should have empty performance and status fields

Example descriptions:
- Use ensemble of 3 random forests with different feature subsets
- Replace neural network with gradient boosting decision trees
- Implement Monte Carlo tree search for feature selection

Add exactly $count rows to the CSV file now."

  echo "[INFO] Calling Claude Opus to generate $count novel exploration ideas..."
  if ! echo "$prompt" | claude --dangerously-skip-permissions --model opus -p; then
    echo "[WARN] Claude failed to generate novel ideas" >&2
    return 1
  fi
  echo "[INFO] Novel exploration ideas generated"
}

# Generate hill climbing ideas by having Claude edit CSV directly
generate_hill_climbing_direct() {
  local count="$1"
  local top_performers="$2"
  
  local prompt="Edit the file $FULL_CSV_PATH to add exactly $count new rows for parameter tuning based on successful algorithms.

Current CSV content:
$(cat "$FULL_CSV_PATH")

Successful algorithms to build on:
$top_performers

Project Brief:
$(cat "$FULL_BRIEF_PATH")

Requirements for new CSV rows:
- IDs must be numbers only (suitable for filenames)
- basedOnId should reference ONE of the successful algorithm IDs above (pick the best one)
- Each description should be one clear sentence about parameter tuning
- Focus on adjusting hyperparameters, thresholds, sizes, learning rates
- All new rows should have empty performance and status fields

Example descriptions:
- Increase learning rate from 0.001 to 0.01 for faster convergence
- Reduce batch size from 32 to 16 to improve gradient estimates
- Set dropout rate to 0.3 instead of 0.1 to prevent overfitting

Add exactly $count parameter tuning rows to the CSV file now."

  echo "[INFO] Calling Claude Opus to generate $count hill climbing ideas..."
  if ! echo "$prompt" | claude --dangerously-skip-permissions --model opus -p; then
    echo "[WARN] Claude failed to generate hill climbing ideas" >&2
    return 1
  fi
  echo "[INFO] Hill climbing ideas generated"
}

# Generate structural mutation ideas by having Claude edit CSV directly
generate_structural_mutation_direct() {
  local count="$1"
  local top_performers="$2"
  
  local prompt="Edit the file $FULL_CSV_PATH to add exactly $count new rows for structural modifications based on successful algorithms.

Current CSV content:
$(cat "$FULL_CSV_PATH")

Successful algorithms to build on:
$top_performers

Project Brief:
$(cat "$FULL_BRIEF_PATH")

Requirements for new CSV rows:
- IDs must be numbers only (suitable for filenames)
- basedOnId should reference ONE of the successful algorithm IDs above (pick the best one)
- Each description should be one clear sentence about architectural changes
- Keep core insights but change implementation approach
- All new rows should have empty performance and status fields

Example descriptions:
- Replace linear layers with convolutional layers for spatial feature learning
- Use bidirectional LSTM instead of unidirectional for better context
- Add residual connections between layers to improve gradient flow

Add exactly $count structural modification rows to the CSV file now."

  echo "[INFO] Calling Claude Opus to generate $count structural mutation ideas..."
  if ! echo "$prompt" | claude --dangerously-skip-permissions --model opus -p; then
    echo "[WARN] Claude failed to generate structural mutation ideas" >&2
    return 1
  fi
  echo "[INFO] Structural mutation ideas generated"
}

# Generate crossover hybrid ideas by having Claude edit CSV directly
generate_crossover_direct() {
  local count="$1"
  local top_performers="$2"
  
  local prompt="Edit the file $FULL_CSV_PATH to add exactly $count new rows for hybrid combinations of successful algorithms.

Current CSV content:
$(cat "$FULL_CSV_PATH")

Top performers to combine:
$top_performers

Project Brief:
$(cat "$FULL_BRIEF_PATH")

Requirements for new CSV rows:
- IDs must be numbers only (suitable for filenames)
- basedOnId should reference ONE of the successful algorithm IDs above (pick the best one as base)
- Each description should be one clear sentence combining elements from different algorithms
- Be specific about what elements to merge
- All new rows should have empty performance and status fields

Example descriptions:
- Combine ensemble voting from algorithm 3 with feature selection from algorithm 5
- Use the attention mechanism from algorithm 2 with the optimizer from algorithm 4
- Merge the preprocessing pipeline from algorithm 1 with the architecture from algorithm 6

Add exactly $count hybrid combination rows to the CSV file now."

  echo "[INFO] Calling Claude Opus to generate $count crossover hybrid ideas..."
  if ! echo "$prompt" | claude --dangerously-skip-permissions --model opus -p; then
    echo "[WARN] Claude failed to generate crossover ideas" >&2
    return 1
  fi
  echo "[INFO] Crossover hybrid ideas generated"
}

# Legacy AI generation mode (for backward compatibility)
ideate_ai_legacy() {
  # Check for claude CLI
  if ! command -v claude >/dev/null 2>&1; then
    echo "[WARN] Claude CLI not found. Falling back to manual entry."
    return 1
  fi

  if [[ ! -f "$FULL_BRIEF_PATH" ]]; then
    echo "[WARN] $BRIEF_FILE not found. Falling back to manual entry."
    return 1
  fi

  # Get top performers (pure shell)
  local top_performers=""
  if [[ -f "$FULL_CSV_PATH" ]]; then
    # Simple top performers extraction (lines with non-empty performance)
    top_performers=$(awk -F, 'NR > 1 && $4 != "" { print $1 ": " $3 " (score: " $4 ")" }' "$FULL_CSV_PATH" | head -5)
  fi

  # Build prompt
  local prompt="Edit the file $FULL_CSV_PATH to add exactly $TOTAL_IDEAS new algorithm variation rows.

Current CSV content:
$(cat "$FULL_CSV_PATH")

Project Brief:
$(cat "$FULL_BRIEF_PATH")"

  if [[ -n $top_performers ]]; then
    prompt+="

Top Performing Algorithms So Far:
$top_performers"
  fi

  prompt+="

Requirements for new CSV rows:
- IDs must be numbers only (suitable for filenames)
- basedOnId should be empty or reference existing algorithm ID
- Each description should be one clear sentence describing an algorithmic approach
- All new rows should have empty performance and status fields

Add exactly $TOTAL_IDEAS algorithm variation rows to the CSV file now."

  echo "[INFO] Calling Claude Opus to generate $TOTAL_IDEAS ideas (legacy mode)..."
  if ! echo "$prompt" | claude --dangerously-skip-permissions --model opus -p; then
    echo "[WARN] Claude failed to generate ideas" >&2
    return 1
  fi
  echo "[INFO] Legacy ideas generated"
}

# Main execution
if [[ $no_ai == true ]]; then
  echo "[INFO] Manual entry mode"
  ideate_manual
elif [[ $use_strategies == true ]]; then
  echo "[INFO] Multi-strategy AI generation mode"
  if ! ideate_ai_strategies; then
    echo "[INFO] Falling back to manual entry"
    ideate_manual
  fi
else
  echo "[INFO] Legacy AI generation mode"
  if ! ideate_ai_legacy; then
    echo "[INFO] Falling back to manual entry" 
    ideate_manual
  fi
fi