#!/bin/bash
set -e

# Source configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
source "$SCRIPT_DIR/../lib/config.sh"
source "$SCRIPT_DIR/../lib/csv-lock.sh"

# Track current candidate for cleanup
CURRENT_CANDIDATE_ID=""
TERMINATION_SIGNAL=""

# Cleanup function to handle termination
cleanup_on_exit() {
  if [[ -n "$CURRENT_CANDIDATE_ID" ]]; then
    # Only mark as failed if it was a timeout (SIGTERM from timeout command)
    # For user interruption (Ctrl-C) or kill, leave it for retry
    if [[ "$TERMINATION_SIGNAL" == "TERM" ]]; then
      echo "[WORKER-$$] Timeout detected, marking $CURRENT_CANDIDATE_ID as failed" >&2
      "$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
try:
    with EvolutionCSV('$FULL_CSV_PATH') as csv:
        csv.update_candidate_status('$CURRENT_CANDIDATE_ID', 'failed')
except:
    pass  # Best effort cleanup
" 2>/dev/null || true
    else
      echo "[WORKER-$$] Interrupted, leaving $CURRENT_CANDIDATE_ID for retry" >&2
      # Optionally reset to pending instead of leaving as running
      "$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
try:
    with EvolutionCSV('$FULL_CSV_PATH') as csv:
        csv.update_candidate_status('$CURRENT_CANDIDATE_ID', 'pending')
except:
    pass  # Best effort cleanup
" 2>/dev/null || true
    fi
  fi
}

# Set up signal handlers
trap 'TERMINATION_SIGNAL="TERM"; cleanup_on_exit' TERM
trap 'TERMINATION_SIGNAL="INT"; cleanup_on_exit' INT
trap 'TERMINATION_SIGNAL="HUP"; cleanup_on_exit' HUP
trap 'cleanup_on_exit' EXIT

# Parse arguments first to get config path
timeout_seconds=""
config_path=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    --timeout)
      timeout_seconds="$2"
      shift 2
      ;;
    --config)
      config_path="$2"
      shift 2
      ;;
    *)
      echo "[ERROR] Unknown argument: $1" >&2
      exit 1
      ;;
  esac
done

# Load config using the provided path, environment variable, or default
if [[ -n $config_path ]]; then
  load_config "$config_path"
elif [[ -n ${CLAUDE_EVOLVE_CONFIG:-} ]]; then
  load_config "$CLAUDE_EVOLVE_CONFIG"
else
  load_config
fi

# Call an AI model with a prompt - handles model-specific invocation
call_ai_model() {
  local model="$1"
  local prompt="$2"
  local ai_output
  local ai_exit_code
  
  case "$model" in
    "claude")
      # Pass prompt as argument, not via stdin
      ai_output=$(timeout 300 claude --dangerously-skip-permissions -p "$prompt" 2>&1)
      ai_exit_code=$?
      ;;
      
    "gemini")
      # Pass prompt as argument, not via stdin
      ai_output=$(timeout 300 gemini -y -p "$prompt" 2>&1)
      ai_exit_code=$?
      ;;
      
    "codex")
      # Pass prompt as argument, not via stdin
      ai_output=$(timeout 300 codex exec --dangerously-bypass-approvals-and-sandbox "$prompt" 2>&1)
      ai_exit_code=$?
      ;;
      
    *)
      echo "[WORKER-$$] ERROR: Unknown AI model: $model" >&2
      return 1
      ;;
  esac
  
  # Return output via stdout
  echo "$ai_output"
  return $ai_exit_code
}

# Check if AI output indicates a usage limit was hit
is_usage_limit_error() {
  local output="$1"
  local model="$2"
  
  case "$model" in
    "claude")
      echo "$output" | grep -q "Claude AI usage limit reached"
      ;;
    "gemini")
      # Check for various Gemini quota/limit messages
      echo "$output" | grep -qE "Quota exceeded|quota limit|rate limit|usage limit|429|Too Many Requests"
      ;;
    "codex")
      # Add codex-specific limit patterns if they exist
      false
      ;;
    *)
      false
      ;;
  esac
}

# Validate if AI output is successful
is_valid_ai_output() {
  local output="$1"
  local model="$2"
  local exit_code="$3"
  
  # First check exit code
  [[ $exit_code -ne 0 ]] && return 1
  
  # Model-specific validation
  case "$model" in
    "claude")
      # Claude is straightforward - exit code 0 means success
      return 0
      ;;
      
    "gemini")
      # Gemini needs extra validation for auth messages
      if echo "$output" | grep -q "Attempting to authenticate\|Authenticating\|Loading\|Initializing"; then
        return 1
      fi
      # Also check for minimal output
      if [[ -z "$output" ]] || [[ $(echo "$output" | wc -l) -lt 2 ]]; then
        return 1
      fi
      return 0
      ;;
      
    "codex")
      # Codex might return JSON that needs extraction
      if echo "$output" | grep -q '"content"'; then
        # Will be cleaned later, just check it's not an error
        if echo "$output" | grep -q "error\|failed\|exception"; then
          return 1
        fi
      fi
      [[ -n "$output" ]]
      ;;
      
    *)
      return 1
      ;;
  esac
}

# Clean AI output if needed (e.g., extract from JSON)
clean_ai_output() {
  local output="$1"
  local model="$2"
  
  case "$model" in
    "codex")
      # Clean codex output - extract content between "codex" marker and "tokens used"
      if echo "$output" | grep -q "^\[.*\] codex$"; then
        # Extract content between "codex" line and "tokens used" line
        output=$(echo "$output" | awk '/\] codex$/{flag=1;next}/\] tokens used/{flag=0}flag')
      elif echo "$output" | grep -q '"content"'; then
        # Old JSON format
        output=$(echo "$output" | python3 -c "
import sys
import json
try:
    data = json.load(sys.stdin)
    if 'content' in data:
        print(data['content'])
    elif 'response' in data:
        print(data['response'])
    elif 'text' in data:
        print(data['text'])
    else:
        print(json.dumps(data))
except:
    print(sys.stdin.read())
" 2>/dev/null || echo "$output")
      fi
      # Trim whitespace
      output=$(echo "$output" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
      ;;
  esac
  
  echo "$output"
}

# AI round-robin with fallback function for code evolution
call_ai_for_evolution() {
  local prompt="$1"
  local candidate_id="$2"
  
  # Extract generation and ID numbers for round-robin calculation
  local gen_num=0
  local id_num=0
  if [[ $candidate_id =~ ^gen([0-9]+)-([0-9]+)$ ]]; then
    gen_num=$((10#${BASH_REMATCH[1]}))
    id_num=$((10#${BASH_REMATCH[2]}))
  fi
  
  # Calculate hash for round-robin (combine generation and ID)
  local hash_value=$((gen_num * 1000 + id_num))
  
  # Check which AI tools are available
  local available_models=()
  if command -v claude >/dev/null 2>&1; then
    available_models+=("claude")
  fi
  if command -v gemini >/dev/null 2>&1; then
    available_models+=("gemini")
  fi
  if command -v codex >/dev/null 2>&1; then
    available_models+=("codex")
  fi
  
  if [[ ${#available_models[@]} -eq 0 ]]; then
    echo "[WORKER-$$] ERROR: No AI models available!" >&2
    return 1
  fi
  
  # Create ordered list based on round-robin for this candidate
  local num_models=${#available_models[@]}
  local start_index=$((hash_value % num_models))
  local models=()
  
  # Add models in round-robin order starting from the calculated index
  for ((i=0; i<num_models; i++)); do
    local idx=$(((start_index + i) % num_models))
    models+=("${available_models[$idx]}")
  done
  
  echo "[WORKER-$$] Model order for $candidate_id (round-robin): ${models[*]}" >&2
  echo "[WORKER-$$] Available models: ${available_models[*]}" >&2
  echo "[WORKER-$$] Number of models to try: ${#models[@]}" >&2
  
  # Track models that hit usage limits and models we tried
  local limited_models=()
  local tried_models=()
  
  # Try each model in the ordered sequence
  for model in "${models[@]}"; do
    echo "[WORKER-$$] Attempting code evolution with $model" >&2
    tried_models+=("$model")
    
    # Call the AI model
    local ai_output
    ai_output=$(call_ai_model "$model" "$prompt")
    local ai_exit_code=$?
    
    # Check for usage limits
    if is_usage_limit_error "$ai_output" "$model"; then
      echo "[WORKER-$$] $model hit usage limit - trying next model" >&2
      limited_models+=("$model")
      continue
    fi
    
    # Validate output
    if is_valid_ai_output "$ai_output" "$model" "$ai_exit_code"; then
      # Clean output if needed
      ai_output=$(clean_ai_output "$ai_output" "$model")
      echo "[WORKER-$$] $model succeeded" >&2
      # Output the cleaned result for the worker to use
      echo "$ai_output"
      return 0
    fi
    
    echo "[WORKER-$$] $model failed (exit code $ai_exit_code), trying next model..." >&2
    if [[ -n "$ai_output" ]]; then
      echo "[WORKER-$$] $model error: $(echo "$ai_output" | head -5)" >&2
    fi
  done
  
  # All models have been tried
  echo "[WORKER-$$] All AI models in rotation have been tried" >&2
  
  # Only exit with code 3 if ALL TRIED models hit usage limits
  if [[ ${#limited_models[@]} -gt 0 ]] && [[ ${#limited_models[@]} -eq ${#tried_models[@]} ]]; then
    echo "[WORKER-$$] All tried models hit usage limits: ${limited_models[*]}" >&2
    echo "[WORKER-$$] Unable to complete evolution due to API limits" >&2
    exit 3
  fi
  
  echo "[WORKER-$$] Models that failed: ${tried_models[*]}" >&2
  if [[ ${#limited_models[@]} -gt 0 ]]; then
    echo "[WORKER-$$] Models that hit limits: ${limited_models[*]}" >&2
  fi
  
  return 1
}

# Validate paths
if [[ ! -f "$FULL_CSV_PATH" ]]; then
  echo "[WORKER-$$] CSV file not found: $FULL_CSV_PATH" >&2
  exit 1
fi

# Process a single candidate
process_candidate() {
  local candidate_id="$1"
  local parent_id="$2"
  local description="$3"
  
  echo "[WORKER-$$] Processing candidate ID: $candidate_id"
  echo "[WORKER-$$] Description: $description"
  echo "[WORKER-$$] Based on ID: $parent_id"
  
  # Determine source algorithm
  local source_file
  if [[ -z "$parent_id" ]]; then
    echo "[WORKER-$$] Using base algorithm"
    source_file="$FULL_ALGORITHM_PATH"
  else
    echo "[WORKER-$$] Using parent algorithm: $parent_id"
    source_file="$FULL_OUTPUT_DIR/evolution_${parent_id}.py"
    if [[ ! -f "$source_file" ]]; then
      echo "[WORKER-$$] ERROR: Parent algorithm not found: $source_file" >&2
      return 1
    fi
  fi
  
  # Check if this is a baseline candidate (no parent and specific ID pattern)
  local is_baseline=false
  if [[ -z "$parent_id" ]] && [[ "$candidate_id" =~ ^(baseline|baseline-000|000|0|gen00-000)$ ]]; then
    is_baseline=true
    echo "[WORKER-$$] Detected baseline candidate - will run algorithm.py directly"
  fi
  
  # Target file for evolution (not used for baseline)
  local target_file="$FULL_OUTPUT_DIR/evolution_${candidate_id}.py"
  
  # Check if processing should be skipped
  if [[ "$is_baseline" == "true" ]]; then
    # For baseline, skip all file operations
    echo "[WORKER-$$] Baseline candidate - skipping file operations"
  elif [[ -f "$target_file" ]]; then
    echo "[WORKER-$$] �  Skipping copy - File already exists - skipping all processing"
    echo "[WORKER-$$] �  Skipping Claude processing - File already exists - skipping all processing"
    
    # Check if already evaluated
    local current_status
    current_status=$("$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
with EvolutionCSV('$FULL_CSV_PATH') as csv:
    candidate = csv.get_candidate_info('$candidate_id')
    if candidate:
        print(candidate.get('status', 'unknown'))
    else:
        print('unknown')
")
    
    if [[ "$current_status" == "complete" ]]; then
      echo "[WORKER-$$] Already evaluated - skipping"
      return 0
    fi
    
    # Run evaluation only
    echo "[WORKER-$$] Running evaluation..."
  else
    # Copy source to target
    echo "[WORKER-$$] Copying $source_file to $target_file"
    cp "$source_file" "$target_file"
    
    # Apply evolution using AI
    echo "[WORKER-$$] Applying evolution..."
    
    # Use relative path for AI prompt
    local target_basename=$(basename "$target_file")
    local evolution_prompt="Modify the algorithm in $target_basename based on this description: $description
    
The modification should be substantial and follow the description exactly. Make sure the algorithm still follows all interface requirements and can run properly.

Important: Make meaningful changes that match the description. Don't just add comments or make trivial adjustments.

CRITICAL: Do NOT use any git commands (git add, git commit, git reset, etc.). Only modify the file directly."
    
    if [[ "$is_baseline" != "true" ]]; then
      # Change to evolution directory so AI can access files
      local original_pwd=$(pwd)
      cd "$FULL_EVOLUTION_DIR"
      
      # Try AI models with round-robin based on candidate ID
      if ! call_ai_for_evolution "$evolution_prompt" "$candidate_id"; then
        echo "[WORKER-$$] ERROR: All AI models failed to generate code" >&2
        cd "$original_pwd"
        rm -f "$target_file"  # Clean up on failure
        return 1
      fi
      
      # Restore working directory
      cd "$original_pwd"
      
      echo "[WORKER-$$] Evolution applied successfully"
    fi
  fi
  
  # Run evaluation
  echo "[WORKER-$$] Evaluating algorithm..."
  local eval_output_file="$FULL_EVOLUTION_DIR/temp-eval-$$-$candidate_id.out"
  local eval_start=$(date +%s)
  
  # Prepare evaluation command
  # For baseline, pass "baseline" or empty string to evaluator to use algorithm.py
  local eval_arg="$candidate_id"
  if [[ "$is_baseline" == "true" ]]; then
    # Evaluator should interpret this as "use algorithm.py directly"
    eval_arg=""
  fi
  local eval_cmd=("$PYTHON_CMD" "$FULL_EVALUATOR_PATH" "$eval_arg")
  [[ -n "$timeout_seconds" ]] && eval_cmd=(timeout "$timeout_seconds" "${eval_cmd[@]}")
  
  # Run evaluation with tee to both display and capture output
  # Use stdbuf to disable buffering for real-time output
  if stdbuf -o0 -e0 "${eval_cmd[@]}" 2>&1 | tee "$eval_output_file" >&2; then
    local eval_end=$(date +%s)
    local eval_duration=$((eval_end - eval_start))
    
    # Read captured output for parsing
    eval_output=$(<"$eval_output_file")
    
    # Extract performance score - support multiple formats
    # Try to parse the output and extract score
    local score_and_json=$("$PYTHON_CMD" -c "
import sys
import json
import re

output = '''$eval_output'''

# Try different formats
score = None
json_data = None

# Format 1: Simple numeric value (just a number on a line)
for line in output.strip().split('\n'):
    line = line.strip()
    if line and not line.startswith('{'):
        try:
            score = float(line)
            break
        except ValueError:
            pass

# Format 2: JSON with 'performance' or 'score' field
if score is None:
    for line in output.strip().split('\n'):
        line = line.strip()
        if line.startswith('{'):
            try:
                data = json.loads(line)
                json_data = data
                if 'performance' in data:
                    score = float(data['performance'])
                elif 'score' in data:
                    score = float(data['score'])
                break
            except (json.JSONDecodeError, ValueError, KeyError):
                pass

# Format 3: SCORE: prefix (backward compatibility)
if score is None:
    match = re.search(r'^SCORE:\s*([+-]?\d*\.?\d+)', output, re.MULTILINE)
    if match:
        try:
            score = float(match.group(1))
        except ValueError:
            pass

# Output results
if score is not None:
    print(f'SCORE={score}')
    if json_data:
        print('JSON_DATA=' + json.dumps(json_data))
else:
    print('SCORE=NONE')
")
    
    # Parse the Python output
    local score=""
    local json_data=""
    while IFS= read -r line; do
      if [[ "$line" =~ ^SCORE=(.*)$ ]]; then
        score="${BASH_REMATCH[1]}"
      elif [[ "$line" =~ ^JSON_DATA=(.*)$ ]]; then
        json_data="${BASH_REMATCH[1]}"
      fi
    done <<< "$score_and_json"
    
    if [[ "$score" != "NONE" ]] && [[ -n "$score" ]]; then
      echo "[WORKER-$$] Evaluation complete: score=$score (${eval_duration}s)"
      
      # Update CSV with result
      if [[ -n "$json_data" ]]; then
        # If we have JSON data, update all fields
        "$PYTHON_CMD" -c "
import sys
import json
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV

json_data = json.loads('$json_data')
with EvolutionCSV('$FULL_CSV_PATH') as csv:
    csv.update_candidate_status('$candidate_id', 'complete')
    # Update all fields from JSON
    for key, value in json_data.items():
        csv.update_candidate_field('$candidate_id', key, str(value))
"
      else
        # Simple score only
        "$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
with EvolutionCSV('$FULL_CSV_PATH') as csv:
    csv.update_candidate_status('$candidate_id', 'complete')
    csv.update_candidate_performance('$candidate_id', '$score')
"
      fi
    else
      echo "[WORKER-$$] ERROR: No score found in evaluation output" >&2
      echo "[WORKER-$$] Output: $eval_output" >&2
      # rm -f "$eval_output_file"  # Keep for debugging
      echo "[WORKER-$$] Evaluation output saved to: $eval_output_file" >&2
      return 1
    fi
    
    # Clean up temp file (comment out to keep for debugging)
    # rm -f "$eval_output_file"
    echo "[WORKER-$$] Evaluation output saved to: $eval_output_file" >&2
  else
    local exit_code=$?
    # Read any output that was captured before failure
    eval_output=$(<"$eval_output_file")
    # rm -f "$eval_output_file"  # Keep for debugging
    echo "[WORKER-$$] Evaluation output saved to: $eval_output_file" >&2
    
    echo "[WORKER-$$] ERROR: Evaluation failed with exit code $exit_code" >&2
    echo "[WORKER-$$] Output: $eval_output" >&2
    
    # Mark as failed in CSV
    "$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
with EvolutionCSV('$FULL_CSV_PATH') as csv:
    csv.update_candidate_status('$candidate_id', 'failed')
"
    
    return $exit_code
  fi
}

# Main worker loop
echo "[WORKER-$$] Worker started"

while true; do
  # Try to claim a pending candidate
  candidate_info=$("$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
with EvolutionCSV('$FULL_CSV_PATH') as csv:
    result = csv.get_next_pending_candidate()
    if result:
        candidate_id, _ = result
        # Get full candidate info
        candidate = csv.get_candidate_info(candidate_id)
        if candidate:
            print(f'{candidate[\"id\"]}|{candidate.get(\"basedOnId\", \"\")}|{candidate[\"description\"]}')
")
  
  if [[ -z "$candidate_info" ]]; then
    # No pending work
    break
  fi
  
  # Parse candidate info
  IFS='|' read -r candidate_id parent_id description <<< "$candidate_info"
  
  # Set current candidate for cleanup
  CURRENT_CANDIDATE_ID="$candidate_id"
  
  # Process the candidate
  if process_candidate "$candidate_id" "$parent_id" "$description"; then
    echo "[WORKER-$$] Successfully processed $candidate_id"
  else
    echo "[WORKER-$$] Failed to process $candidate_id"
    # Ensure status is set to failed (might already be done in process_candidate)
    "$PYTHON_CMD" -c "
import sys
sys.path.insert(0, '$SCRIPT_DIR/..')
from lib.evolution_csv import EvolutionCSV
with EvolutionCSV('$FULL_CSV_PATH') as csv:
    csv.update_candidate_status('$candidate_id', 'failed')
" 2>/dev/null || true
  fi
  
  # Clear current candidate
  CURRENT_CANDIDATE_ID=""
done

echo "[WORKER-$$] No more pending candidates, worker exiting"