#!/bin/bash

set -e

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/config.sh
source "$SCRIPT_DIR/../lib/config.sh"

# Use CLAUDE_EVOLVE_CONFIG if set, otherwise default
if [[ -n ${CLAUDE_EVOLVE_CONFIG:-} ]]; then
  load_config "$CLAUDE_EVOLVE_CONFIG"
else
  load_config
fi

# Parse arguments
open_chart=false
csv_file="$FULL_CSV_PATH"
output_file=""  # Will be set later if not specified

while [[ $# -gt 0 ]]; do
  case $1 in
  --help)
    cat <<EOF
claude-evolve analyze - Analyze evolution results

USAGE:
  claude-evolve analyze [--open] [--csv <path>] [--output <path>]

OPTIONS:
  --open            Open the generated chart automatically
  --csv <path>      Path to evolution.csv (default: ./evolution/evolution.csv)
  --output <path>   Output path for chart PNG (default: ./evolution/performance.png)
  --help            Show this help message

DESCRIPTION:
  Analyzes the evolution.csv file and generates a performance chart.
  Displays summary statistics and identifies the top performing algorithm.
EOF
    exit 0
    ;;
  --open)
    open_chart=true
    shift
    ;;
  --csv)
    csv_file="$2"
    shift 2
    ;;
  --output)
    output_file="$2"
    shift 2
    ;;
  *)
    echo "[ERROR] Unknown option: $1" >&2
    exit 1
    ;;
  esac
done

# Set default output file if not specified
if [[ -z "$output_file" ]]; then
  if [[ -d "$FULL_OUTPUT_DIR" ]]; then
    # We're in an evolution workspace
    output_file="$FULL_OUTPUT_DIR/performance.png"
  else
    # Not in workspace, use temp file
    output_file="/tmp/claude_evolve_performance_$$.png"
  fi
fi

# Check if CSV exists
if [[ ! -f $csv_file ]]; then
  echo "[ERROR] CSV file not found: $csv_file" >&2
  echo "[ERROR] Run 'claude-evolve setup' and 'claude-evolve ideate' first." >&2
  exit 1
fi

echo "=== Evolution Analysis Summary ==="
echo

# Count totals (pure shell)
total=0
completed=0
running=0
failed=0
pending=0
total_performance=0
count_with_performance=0
top_score=""
top_id=""
top_desc=""

# Use Python to parse CSV and generate stats
eval "$("$PYTHON_CMD" -c "
import csv

# Initialize counters
total = 0
completed = 0
running = 0
failed = 0
pending = 0
total_performance = 0
count_with_performance = 0
top_score = None
top_id = ''
top_desc = ''

with open('$csv_file', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    
    for row in reader:
        if len(row) < 5:
            continue
            
        id, _, desc, perf, status = row[:5]
        total += 1
        
        if status in ['complete', 'completed']:
            completed += 1
            if perf and perf != '':
                try:
                    perf_val = float(perf)
                    if perf_val > 0:  # Skip zeros (they're errors)
                        total_performance += perf_val
                        count_with_performance += 1
                        
                        if top_score is None or perf_val > top_score:
                            top_score = perf_val
                            top_id = id
                            top_desc = desc
                except ValueError:
                    pass
        elif status == 'running':
            running += 1
        elif status in ['failed', 'timeout', 'interrupted']:
            failed += 1
        else:
            pending += 1

# Output shell variable assignments
print(f'total={total}')
print(f'completed={completed}')
print(f'running={running}')
print(f'failed={failed}')
print(f'pending={pending}')
print(f'total_performance={total_performance}')
print(f'count_with_performance={count_with_performance}')
print(f'top_score={top_score if top_score is not None else \"\"}')
print(f'top_id=\"{top_id}\"')
# Escape special characters in description
desc_escaped = top_desc.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"').replace('\$', '\\\\\$').replace('\`', '\\\\\`')
print(f'top_desc=\"{desc_escaped}\"')
")"

# Display summary
echo "Total Candidates: $total"
echo "Completed: $completed"
echo "Running: $running"
echo "Failed: $failed"
echo "Pending: $pending"

if [[ $count_with_performance -gt 0 ]]; then
  avg_performance=$(echo "scale=4; $total_performance / $count_with_performance" | bc -l 2>/dev/null || echo "0")
  echo "Average Performance: $avg_performance"  # Still showing mean for overall stats
else
  echo "Average Performance: N/A"
fi

echo
echo "=== Top Performer ==="
if [[ -n $top_id ]]; then
  echo "ID: $top_id"
  echo "Performance: $top_score"
  echo "Description: $top_desc"
else
  echo "No completed candidates yet"
fi

# Generation analysis
echo
echo "=== Generation Analysis ==="

# Create temporary file for generation stats
gen_stats_file="/tmp/evolution_gen_stats_$$.tmp"
>"$gen_stats_file"

# Use Python to write generation stats
"$PYTHON_CMD" -c "
import csv
import re

with open('$csv_file', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    
    with open('$gen_stats_file', 'w') as out:
        for row in reader:
            if len(row) < 5:
                continue
                
            id, _, desc, perf, status = row[:5]
            
            # Extract generation from ID
            gen = 'gen01'  # default for old numeric IDs
            match = re.match(r'^(gen[0-9]+)-', id)
            if match:
                gen = match.group(1)
            elif re.match(r'^[0-9]+$', id):
                gen = 'gen00'  # Mark old numeric IDs as gen00
            
            # Write generation data
            out.write(gen + ' ')
            if status in ['complete', 'completed'] and perf and perf != '':
                try:
                    perf_val = float(perf)
                    if perf_val > 0:
                        out.write(f'completed {perf}\\n')
                    else:
                        out.write('error\\n')
                except ValueError:
                    out.write('error\\n')
            else:
                out.write('incomplete\\n')
"

# Process generation stats
for gen in $(cut -d' ' -f1 "$gen_stats_file" | sort -u || echo ""); do
  [[ -z "$gen" ]] && continue
  total_in_gen=$(grep -c "^$gen " "$gen_stats_file" 2>/dev/null || echo "0")
  completed_in_gen=$(grep -c "^$gen completed" "$gen_stats_file" 2>/dev/null || echo "0")
  # Clean any whitespace from the numbers
  completed_in_gen=$(echo "$completed_in_gen" | tr -d '[:space:]')
  
  echo -n "$gen: $total_in_gen candidates"
  
  if [[ "$completed_in_gen" -gt 0 ]]; then
    # Calculate median performance for this generation
    # AIDEV-NOTE: Changed from mean to median to be more robust to outliers
    median="0"
    if grep -q "^$gen completed" "$gen_stats_file"; then
      median=$(grep "^$gen completed" "$gen_stats_file" | awk '{print $3}' | sort -n | awk '{
        a[NR] = $0
      }
      END {
        if (NR % 2) {
          # Odd number of elements
          print a[(NR + 1) / 2]
        } else {
          # Even number of elements - average of two middle values
          printf "%.4f", (a[NR/2] + a[NR/2 + 1]) / 2.0
        }
      }' 2>/dev/null || echo "0")
    fi
    echo " ($completed_in_gen completed, median: $median)"
  else
    echo " (0 completed)"
  fi
done

rm -f "$gen_stats_file"

# Count valid performance entries for chart (excluding zeros)
valid_performance_count=0
# Count valid performance entries using Python
valid_performance_count=$("$PYTHON_CMD" -c "
import csv

count = 0
with open('$csv_file', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    
    for row in reader:
        if len(row) < 5:
            continue
        status = row[4]
        perf = row[3]
        
        if status in ['complete', 'completed'] and perf and perf != '':
            try:
                if float(perf) > 0:
                    count += 1
            except ValueError:
                pass
                
print(count)
")

# Simple chart generation using gnuplot if available
if command -v gnuplot >/dev/null 2>&1 && [[ $valid_performance_count -gt 0 ]]; then
  echo
  echo "Generating performance chart: $output_file"

  # Create data files for gnuplot
  data_file="/tmp/evolution_data_$$.dat"
  winner_file="/tmp/evolution_winner_$$.dat"
  gen_avg_file="/tmp/evolution_gen_avg_$$.dat"
  
  echo "# Row ID Performance Generation" >"$data_file"
  echo "# Generation MedianPerformance Color" >"$gen_avg_file"

  # Get color by generation number (rotates through 7 colors)
  get_gen_color() {
    local gen_num="$1"
    local color_index=$(( gen_num % 7 ))
    case $color_index in
      0) echo "#1f77b4" ;;  # blue
      1) echo "#ff7f0e" ;;  # orange  
      2) echo "#2ca02c" ;;  # green
      3) echo "#d62728" ;;  # red
      4) echo "#9467bd" ;;  # purple
      5) echo "#8c564b" ;;  # brown
      6) echo "#e377c2" ;;  # pink
    esac
  }

  # Create temporary files for generation tracking
  gen_data_temp="/tmp/evolution_gen_temp_$$.dat"
  >"$gen_data_temp"
  
  row_num=0
  max_perf=0
  max_row=0
  max_id=""
  
  # Use Python to generate chart data
  "$PYTHON_CMD" -c "
import csv
import re

with open('$csv_file', 'r') as f:
    reader = csv.reader(f)
    next(reader)  # Skip header
    
    completed_order = 0  # Track order of completion
    
    with open('$data_file', 'w') as data_f:
        data_f.write('# Order ID Performance Generation\\n')
        
    with open('$gen_data_temp', 'w') as gen_f:
        pass  # Clear file
    
    max_perf = 0
    max_id = ''
    max_order = 0
    
    for row in reader:
        if len(row) < 5:
            continue
            
        id, _, desc, perf, status = row[:5]
        
        # Extract generation from ID
        gen = 'gen01'  # default
        gen_num = 1
        match = re.match(r'^gen([0-9]+)-', id)
        if match:
            gen = f'gen{match.group(1)}'
            gen_num = int(match.group(1))
        
        # Only include completed algorithms with non-zero performance
        if perf and perf != '' and status in ['complete', 'completed']:
            try:
                perf_val = float(perf)
                if perf_val > 0:
                    completed_order += 1
                    
                    # Write to data file
                    with open('$data_file', 'a') as f:
                        f.write(f'{completed_order} \"{id}\" {perf} {gen_num}\\n')
                    
                    # Write to gen temp file
                    with open('$gen_data_temp', 'a') as f:
                        f.write(f'{gen} {perf}\\n')
                    
                    # Track the winner
                    if perf_val > max_perf:
                        max_perf = perf_val
                        max_order = completed_order
                        max_id = id
            except ValueError:
                pass

# Output max values for shell
print(f'max_perf={max_perf}')
print(f'max_row={max_order}')
print(f'max_id=\"{max_id}\"')
"
  
  # Capture the output properly
  eval "$("$PYTHON_CMD" -c "
import csv
import re

with open('$csv_file', 'r') as f:
    reader = csv.reader(f)
    next(reader)
    
    max_perf = 0
    max_id = ''
    max_order = 0
    completed_order = 0
    
    for row in reader:
        if len(row) >= 5 and row[3] and row[4] in ['complete', 'completed']:
            try:
                perf_val = float(row[3])
                if perf_val > 0:
                    completed_order += 1
                    if perf_val > max_perf:
                        max_perf = perf_val
                        max_order = completed_order
                        max_id = row[0]
            except ValueError:
                pass

print(f'max_perf={max_perf}')
print(f'max_row={max_order}')
print(f'max_id=\"{max_id}\"')
")"

  # Create generation averages file and track max generation
  gen_index=1
  max_gen_num=0
  for gen in $(cut -d' ' -f1 "$gen_data_temp" | sort -u); do
    if grep -q "^$gen " "$gen_data_temp"; then
      # Calculate median for this generation
      # AIDEV-NOTE: Changed from mean to median to be more robust to outliers
      # Extract all performance values for this generation and sort them
      median=$(grep "^$gen " "$gen_data_temp" | awk '{print $2}' | sort -n | awk '{
        a[NR] = $0
      }
      END {
        if (NR % 2) {
          # Odd number of elements
          print a[(NR + 1) / 2]
        } else {
          # Even number of elements - average of two middle values
          print (a[NR/2] + a[NR/2 + 1]) / 2.0
        }
      }' 2>/dev/null || echo "0")
      count=$(grep -c "^$gen " "$gen_data_temp")
      if [[ $count -gt 0 ]]; then
        avg=$median  # Using median instead of mean
        gen_num=$(echo "$gen" | sed 's/gen0*//')
        # Track max generation number
        if [[ $gen_num =~ ^[0-9]+$ ]] && [[ $gen_num -gt $max_gen_num ]]; then
          max_gen_num=$gen_num
        fi
        color=$(get_gen_color "$gen_num")
        echo "$gen_index \"Gen$gen_num\" $avg \"$color\"" >>"$gen_avg_file"  # avg is now median
        ((gen_index++))
      fi
    fi
  done

  # Create winner data point
  if [[ -n $max_id && -n $max_row && -n $max_perf ]]; then
    echo "$max_row \"$max_id\" $max_perf" >"$winner_file"
  else
    # Create empty winner file to avoid gnuplot warning
    echo "0 \"\" 0" >"$winner_file"
  fi

  # Generate dual plot
  if [[ -s "$data_file" ]]; then
    # Debug: show data file content
    # echo "DEBUG: Data file content:"
    # cat "$data_file"
    # echo "DEBUG: max_gen_num=$max_gen_num"
    
    # Calculate total data points for dynamic sizing
    total_data_points=$(awk 'END {print NR-1}' "$data_file")  # Subtract header row
    
    # AIDEV-NOTE: Dynamic dot sizing based on data point count
    # Use larger dots when there are fewer data points for better visibility
    if [[ $total_data_points -lt 35 ]]; then
      regular_dot_size="1.0"
      winner_dot_size="2.0"
    else
      regular_dot_size="0.6"
      winner_dot_size="1.5"
    fi
    
    # Plot all algorithms in order of completion, colored by generation
    plot_cmd=""
    gen_plots_added=0
    
    # Find all generations that have data
    generations=($(awk '{if(NR>1) print $4}' "$data_file" | sort -n | uniq))
    
    for gen_num in "${generations[@]}"; do
      if [[ -n $gen_num ]]; then
        color=$(get_gen_color "$gen_num")
        if [[ $gen_plots_added -gt 0 ]]; then
          plot_cmd="$plot_cmd, \\"$'\n'
        fi
        plot_cmd="${plot_cmd}     \"$data_file\" using (\$4==$gen_num?\$1:1/0):3 with points linecolor rgb \"$color\" pointsize $regular_dot_size title \"Gen $gen_num\""
        ((gen_plots_added++))
      fi
    done
    
    # Add winner point
    if [[ -n $max_id && -s "$winner_file" ]]; then
      if [[ $gen_plots_added -gt 0 ]]; then
        plot_cmd="$plot_cmd, \\"$'\n'
      fi
      plot_cmd="${plot_cmd}     \"$winner_file\" using 1:3 with points pointtype 7 pointsize $winner_dot_size linecolor rgb \"gold\" title \"Best ($max_id)\""
    fi
    
    # Fallback if no generation-specific plots
    if [[ $gen_plots_added -eq 0 ]]; then
      plot_cmd="\"$data_file\" using 1:3 with points linecolor rgb \"#1f77b4\" pointsize $regular_dot_size title \"Evolution Progress\""
      if [[ -n $max_id && -s "$winner_file" ]]; then
        plot_cmd="$plot_cmd, \\"$'\n'
        plot_cmd="${plot_cmd}     \"$winner_file\" using 1:3 with points pointtype 7 pointsize $winner_dot_size linecolor rgb \"gold\" title \"Best ($max_id)\""
      fi
    fi
    
    # Build x-axis labels for generation chart (include all generations from data)
    xtics_labels=""
    label_index=1
    for gen in $(cut -d' ' -f1 "$gen_data_temp" | sort -u); do
      if [[ -n $gen ]]; then
        gen_display=$(echo "$gen" | sed 's/gen0*//')
        if [[ -n $xtics_labels ]]; then
          xtics_labels="$xtics_labels, "
        fi
        xtics_labels="${xtics_labels}\"Gen$gen_display\" $label_index"
        ((label_index++))
      fi
    done
    
    gnuplot <<EOF
set terminal png size 1200,800
set output "$output_file"

# Set up multiplot with proper spacing
set multiplot layout 2,1 margins 0.08,0.82,0.15,0.95 spacing 0.1,0.15

#=================== TOP PLOT: Performance Over Time ===================
# AIDEV-NOTE: Modified chart to show points only (no lines), smaller dots (0.6), 
# and automatic x-axis tick thinning for 30+ data points
set title "Algorithm Evolution Performance Over Time" font ",14"
set xlabel "Completion Order (Algorithm #)"
set ylabel "Performance Score"
set grid
set key outside right

# AIDEV-NOTE: Simplified approach - let gnuplot auto-scale the axes
# and just set reasonable defaults. The stats command was failing with the data format.

# Set auto-scaling with small margins to prevent "all points out of range"
set autoscale
set yrange [*:*]  # Auto-scale y-axis
set xrange [*:*]  # Auto-scale x-axis

# Define colors for generations
plot $plot_cmd

#=================== BOTTOM PLOT: Generation Medians ===================
set title "Median Performance by Generation" font ",14"
set xlabel "Generation"
set ylabel "Median Performance"
set style fill solid 0.8
set boxwidth 0.6
unset key
set grid y

# Set custom x-axis labels
set xtics ($xtics_labels)

# Auto-scale for generation plot too
set autoscale
set yrange [*:*]

plot "$gen_avg_file" using 1:3 with boxes linecolor rgb "#4CAF50" notitle

unset multiplot

# Add winner label at bottom
set terminal png size 1200,830
set output "$output_file"
set label "Best Overall: $max_id (Score: $max_perf)" at screen 0.5, 0.05 center font ",12"
replot
EOF
  else
    echo "[WARN] No valid performance data to plot"
    exit 0
  fi

  rm -f "$data_file" "$winner_file" "$gen_avg_file" "$gen_data_temp"
  echo "Chart saved to: $output_file"

  # Always try to open chart (not just when --open is used)
  if command -v open >/dev/null 2>&1; then
    open "$output_file"
    echo "Opening chart..."
  elif command -v xdg-open >/dev/null 2>&1; then
    xdg-open "$output_file"
    echo "Opening chart..."
  else
    echo "[WARN] Cannot open chart automatically. View: $output_file"
  fi
else
  if [[ $valid_performance_count -eq 0 ]]; then
    echo
    echo "No valid performance data available for chart generation."
    echo "Run 'claude-evolve run' to execute candidates first."
  else
    echo
    echo "[WARN] gnuplot not found. Install gnuplot for chart generation."
    echo "       On macOS: brew install gnuplot"
    echo "       On Ubuntu: sudo apt install gnuplot"
  fi
fi
