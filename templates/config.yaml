# claude-evolve configuration file
# This file defines paths and settings for the evolution process
# 
# NOTE: The evolution directory is automatically inferred from this config file's location.
# For example, if this file is at /path/to/my-experiment/config.yaml,
# then the evolution directory will be /path/to/my-experiment/

# Algorithm and evaluator file paths (relative to evolution directory)
algorithm_file: "algorithm.py"
evaluator_file: "evaluator.py"
brief_file: "BRIEF.md"

# CSV file for tracking evolution (relative to evolution directory)
evolution_csv: "evolution.csv"

# Output directory for generated algorithms (relative to evolution directory)
# Leave empty to use evolution directory directly
output_dir: ""

# Parent algorithm selection strategy
# Options: "best", "random", "latest"
parent_selection: "best"

# Multi-strategy ideation configuration
ideation_strategies:
  # Total ideas per generation
  total_ideas: 15
  
  # Strategy distribution (must sum to total_ideas)
  novel_exploration: 3      # Pure creativity, global search
  hill_climbing: 5          # Parameter tuning of top performers
  structural_mutation: 3    # Algorithmic changes to top performers
  crossover_hybrid: 4       # Combine successful approaches
  
  # Number of top performers to use as parents
  num_elites: 3

# Python command to use for evaluation
python_cmd: "python3"

# Auto ideation configuration
# When true, automatically generate new ideas when no pending candidates remain
auto_ideate: true

# Retry configuration
# Maximum number of retries for failed candidates before marking as permanently failed
max_retries: 3

# Parallel execution configuration
parallel:
  # Enable parallel execution of evolution candidates
  enabled: false
  
  # Maximum number of worker processes to run simultaneously
  max_workers: 4
  
  # Timeout in seconds when waiting for CSV locks
  lock_timeout: 30

# LLM/AI CLI configuration
llm_cli:
  # How to run each CLI for each LLM option
  # {{PROMPT}} will be replaced with the actual prompt text
  o3: 'codex exec -m o3 --dangerously-bypass-approvals-and-sandbox "{{PROMPT}}"'
  codex: 'codex exec --dangerously-bypass-approvals-and-sandbox "{{PROMPT}}"'
  gemini: 'gemini -y -p "{{PROMPT}}"'
  opus: 'claude --dangerously-skip-permissions --model opus -p "{{PROMPT}}"'
  sonnet: 'claude --dangerously-skip-permissions --model sonnet -p "{{PROMPT}}"'

  # What to run for each sub-command
  # Models are tried in order, with round-robin distribution across candidates
  # You can repeat models for weighted selection (e.g., "sonnet sonnet gemini" for 2:1 ratio)
  run: sonnet gemini
  ideate: opus o3